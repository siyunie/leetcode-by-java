/*
给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在众数。

示例 1:

输入: [3,2,3]
输出: 3
示例 2:

输入: [2,2,1,1,1,2,2]
输出: 2

*/

/*
方法一：hashmap
*/

class Solution {
    public int majorityElement(int[] nums) {
        int len = nums.length/2 + 1;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i], 1);
            }else{
                map.put(nums[i], map.get(nums[i])+1);
            }
            if(map.get(nums[i]) >= len){
                return nums[i];
            }
        }
        return 0;
    }
}

/*
方法二：排序
排序之后数组的中间位置为众数
*/

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return(nums[nums.length/2]);
    }
}

/*
方法三：Boyer-Moore 摩尔投票算法
取第一个值为众数候选，数相同则加1，不同则减1，如果归零则重新选下一个数为众数候选，这样会忽略同样多数目的众数和非众数，最后一个候选即为众数
如果题目没有默认一定有众数，可以做两遍，第一遍找到最后的候选，第二遍判断是否真的过半数
*/

class Solution {
    int candidate;
    public int majorityElement(int[] nums) {
        int count = 0;
        for(int num : nums){
            if(count == 0){
                candidate = num;
                count = 1;
            }else{
                count += num == candidate ? 1:-1;
            }
        }
        return candidate;
    }
}
