/*
给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
进阶:

如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。
*/

/*
方法一：动态规划
dp数组保存包含当前元素的最大连续子数组值
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int[] dp=new int[nums.length];
        dp[0]=nums[0];
        int max=dp[0];
        for(int i=1;i<nums.length;i++){
            dp[i]=Math.max(nums[i],dp[i-1]+nums[i]);
            max=Math.max(dp[i],max);
        }
        return max;
    }
}

/* 
方法二：动态规划改进版，省去创建新数组dp的消耗
用temp保存当前元素的最大子数组的值，当temp>0说明有用 temp+=nums[i],否则temp=nums[i]
*/

class Solution {
    public int maxSubArray(int[] nums) {
        int ans=nums[0];
        int temp=0;
        for(int i=0;i<nums.length;i++){
            if(temp>0){
                temp+=nums[i];
            }else{
                temp=nums[i];
            }
            ans=Math.max(ans,temp);
        }
        return ans;
    }
}
