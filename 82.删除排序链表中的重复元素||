/*

给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。

示例 1:

输入: 1->2->3->3->4->4->5
输出: 1->2->5
示例 2:

输入: 1->1->1->2->3
输出: 2->3

*/

/*
方法一:递归
1.什么时候返回: 当 当前节点为空时
2.本次递归做什么: 如果 此节点值和下节点相同,找到下一个不同节点,将下一个不同的节点经递归处理后的返回节点返回
否则 将此节点的下一节点 指向 经递归处理此节点的原下一节点 返回的节点 
3.递归返回什么: 头节点

注意此处一定要当此节点与下一节点值相等时,while找到下一个跟head不同的值,不然直接去掉while循环,会导致保留最后一个与head相同的值无法删除
因为此值的下一个值与此值不等,无法清除,最后得到一个去重的链表,但是保留了重复的那个数 如 1 2 3 3 3 4 4 5 5  变为 1 2 3 4 5 
但是题目要求变为 1 2 所以一定要while找到下一个不同于head值的节点,然后再将其经递归处理后的节点返回

*/

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode next = head.next;
        if(next != null && head.val == next.val){
            while(next != null && head.val == next.val){
                next = next.next;
            }
            head = deleteDuplicates(next);
        }else{
            head.next = deleteDuplicates(next);
        }
        return head;
    }
}

//

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = head;
        ListNode pre = dummy;
        while(cur != null && cur.next != null){
            if(cur.val == cur.next.val){
                while(cur.next != null && cur.val == cur.next.val){
                    cur = cur.next;
                }
                cur = cur.next;
                pre.next = cur; 
            }else{
                pre = pre.next;
                cur = cur.next;
            }   
        }
        return dummy.next;
    }
}
