/*

给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

*/

/*
方法一：动态规划
含冷冻期即 dp[i][1]=Math.max(dp[i-1][1],dp[i-2][0]+prices[i])
*/

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }
        int[][] dp = new int[prices.length][2];
        for(int i = 0; i<prices.length; i++){
            if(i == 0){
                dp[i][1] = -prices[0];
            }else if(i == 1){ 
                dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
                dp[i][1] = Math.max(dp[i-1][1], -prices[i]);
            }else{
                dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
                dp[i][1] = Math.max(dp[i-1][1], dp[i-2][0] - prices[i]);
            }
        }
        return dp[prices.length-1][0];
    }
}

/*
方法二：动态规划改进
dp_pre为dp[i-2]，所以先用temp保存前一天的dp0，然后结束今天的利润计算后，dp_pre=temp，所以到下一天时dp_pre等于前天的dp0即dp[i-2]
*/

class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }
        int dp0 = 0;
        int dp1 = -prices[0];
        int dp_pre = 0;
        for(int i = 0; i < prices.length; i++){
            int temp = dp0;
            dp0 = Math.max(dp0, dp1 + prices[i]);
            dp1 = Math.max(dp1, dp_pre - prices[i]);
            dp_pre = temp;
        }
        return dp0;
    }
}
