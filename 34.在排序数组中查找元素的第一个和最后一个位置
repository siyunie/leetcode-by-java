/*
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

*/

/*
方法一：二分法变形
当nums[mid]==target时并不停止而是向左继续查找左边界或者向右继续查找右边界
*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length<1){
            return new int[]{-1,-1};
        }
        int left=binarySearch(nums,target,true);
        if(left==nums.length||nums[left]!=target){
            return new int[]{-1,-1};
        }
        int right=binarySearch(nums,target,false)-1;
        return new int[]{left,right};
        }
    
    public int binarySearch(int[] nums,int target,boolean flag){
        int low=0;
        int high=nums.length;
        while(low<high){
            int mid=(high+low)/2;
            if(target==nums[mid]){
                if(flag){
                    high=mid;
                }else{
                    low=mid+1;
                }
            }else if(target>nums[mid]){
                low=mid+1;
            }else if(target<nums[mid]){
                high=mid;
            }
        }
        return low;     
    }
}
