/*

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。

*/

/*
方法一:贪心算法
要求使用最少跳跃次数到达,所以考虑贪心算法,即每次选择此处能跳越位置中下一步能跳的最远的,即此处能跳到的所有i中 i + nums[i] 最大的

reach保存此次能跳到的最远距离,nextReach保存下次能跳到的最远距离,当i == reach时,此次能跳到的所有距离遍历完毕
此时nextReach已经为下一处能跳到的最大距离.步数+1,并更新reach为nextReach,继续遍历, 直至nextReach>=nums.length-1即下次能直接跳到直接返回step+1


*/

class Solution {
    public int jump(int[] nums) {
        if(nums.length == 1){
            return 0;
        }
        int reach = 0;
        int nextReach = 0;
        int step = 0;
        for(int i = 0; i < nums.length; i++){
            nextReach = Math.max(i + nums[i], nextReach);
            if(nextReach >= nums.length - 1){
                return step + 1;
            }
            if(i == reach){
                step++;
                reach = nextReach;
            }
        }
        return step;
    }
}


/*
方法二:贪心算法解二
反着找,从终点开始,从前往后遍历,找第一个能达到终点的位置,更新此位置为新的终点位置,步数+1,重复直到终点位置为0
因为尽量步数少,所以一定尽量选跳的远的,所以从前往后遍历找第一个能达到终点的一定是跳的最远的那个
缺点:时间复杂度高,每次都要循环一次,最差时间复杂度O(n2)

*/

class Solution {
    public int jump(int[] nums) {
        int position = nums.length - 1;
        int step = 0;

        while(position != 0){
            for(int i = 0; i < nums.length - 1; i++){
                if(nums[i] + i >= position){
                    position = i;
                    step++;
                    break;
                }
            }
        }
        return step;
    }
}


//双循环贪心 时间复杂度高

class Solution {
    public int jump(int[] nums) {
        int res = 0;
        for(int i = nums.length - 1; i > 0;){
            int next = i - 1;
            for(int j = i - 1; j >= 0; j--){
                if(nums[j] >= i - j){
                    next = j;
                }
            }
            res++;
            i = next;
        }
        return res;
    }
}
