/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

*/

/*
方法一:排序+双指针
先对数组进行排序,然后维持双指针left = i+1和right = nums.length - 1
因为是有序数组,所以
当三数之和<target, left++
当三数之和>target, right--
同时每次如果和更接近target则更新temp值

*/

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int temp = nums[0] + nums[1] + nums[2];
        for(int i = 0; i < nums.length - 2; i++){
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                if(Math.abs(target - temp) > Math.abs(target - nums[left] - nums[right] - nums[i])){
                    temp = nums[left] + nums[right] + nums[i];
                }
                if(nums[left] + nums[right] + nums[i] > target){
                    right--;
                }else if(nums[left] + nums[right] + nums[i] < target){
                    left++;
                }else{
                    return target;
                }
            }
        }
        return temp;
    }
}
