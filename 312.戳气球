/*
有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。

现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得 nums[left] * nums[i] * nums[right] 个硬币。 这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。

求所能获得硬币的最大数量。

说明:

你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
示例:

输入: [3,1,5,8]
输出: 167 
解释: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
     coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
     
*/

/*
方法一：动态规划
将数组头尾扩充1，方便计算
维持dp[i][j]表示从第i到第j个气球全部戳破的最大值，i,j不戳破
以i j 为端点找最大值，假设最大值是从k处戳破气球，则状态转移方程为  dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + arr[i]*arr[j]*arr[k])
即当最后一次戳破气球时，还要算两端与k的乘积
为了保持i一定大于j，用i+j来替代j，j从2开始，保证至少有三个气球
*/

class Solution {
    public int maxCoins(int[] nums) {
        int[][] dp = new int[nums.length+2][nums.length+2];
        int[] arr = new int[nums.length+2];
        for(int i = 1; i <= nums.length; i++){
            arr[i] = nums[i-1];
        }
        arr[0] = 1;
        arr[nums.length + 1] = 1;
        for(int j = 2; j < arr.length; j++){
            for(int i = 0; i < arr.length - j; i++){
                for(int k = i + 1; k <i + j ; k++){
                    dp[i][i + j] = Math.max(dp[i][i + j], dp[i][k] + dp[k][i + j] + arr[i]*arr[i + j]*arr[k]);
                }
            }
        }
        return dp[0][arr.length - 1];
    }
}
