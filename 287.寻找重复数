/*

给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3
说明：

不能更改原数组（假设数组是只读的）。
只能使用额外的 O(1) 的空间。
时间复杂度小于 O(n2) 。
数组中只有一个重复的数字，但它可能不止重复出现一次。

*/

/*
方法一：快慢双指针+环状链表找入环点
第一反应直接排序，判断每个数与前一个数是否相等，但是要求不能修改原数组
再考虑HashSet，要求常数空间复杂度，也不行
所以将数组的数当成指向下一个数组下标的指针，即[1,3,4,2,2] 构成链表 1->3->2->4->2,重复数即为环形链表的入环点
因为有相同值即总有一个指向相同位置的值，并且一共n+1个数，所有数在1~n之间，所以一定不会越界
因此题目等效于之前做过的用快慢指针找入环点
即：维持快指针每次走两步，慢指针每次走一步，注意这里的每一步，走的都是将数组的值当作下一个经过点的下标，即fast = nums[nums[fast]], slow=nums[slow]
相遇之后，将快指针重置于表头，每次走一步，慢指针在原位置继续每次走一步，再次相遇点即为入环点，也就是相同值
*/

class Solution {
    public int findDuplicate(int[] nums) {
        int fast = 0, slow = 0;
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast){
                fast = 0;
                while(nums[slow] != nums[fast]){
                    slow = nums[slow];
                    fast = nums[fast];
                }
                return nums[slow];
            }
        }
    }
}
