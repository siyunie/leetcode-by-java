/*
判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
进阶:

你能不将整数转为字符串来解决这个问题吗？

*/

/*
方法一:转换成字符串中心扩展
*/

class Solution {
    public boolean isPalindrome(int x) {
        String s = String.valueOf(x);
        
        if(s.length()%2 == 0){
            return helper(s, (s.length()/2) - 1, s.length()/2);
        }else{
            return helper(s, s.length()/2, s.length()/2);
        }
    }

    private boolean helper(String s, int i, int j){
        while(i >= 0 && j < s.length()){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i--;
            j++;
        }
        return true;
    }
}

/*
方法二:数学方法
直接反转数字,对x取余再对余数x10
temp保存反转后的数
考虑到对称,不用全做完再比价,直接做一般反转,如果x长为偶数,则相等,奇数则为temp/10

一开始判断,为负直接返回false
同时如果是0结尾的数且不为0时(如10,20)直接判负
*/

class Solution {
    public boolean isPalindrome(int x) {
        if(x < 0){
            return false;
        }
        if(x%10 == 0 && x != 0){
            return false;
        }
        int temp = 0;
        while(x > temp){
            temp = temp*10 + x%10;
            x = x/10;
        }
        return x == temp || x == temp/10;
    }
}
