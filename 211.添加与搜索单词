/*
设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
说明:

你可以假设所有单词都是由小写字母 a-z 组成的。

*/

/*
方法一:HashMap
HashMap存对应字符串长度,和字符串集合
每次比较取出目标字符串的长度的字符串集合,依次比较集合中的每一个字符串和目标字符串,有一个满足要求即输出true,全部不满足即输出false

*/

class WordDictionary {
    Map<Integer, List<String>> map;
    /** Initialize your data structure here. */
    public WordDictionary() {
        map = new HashMap<>();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        List<String> list = map.getOrDefault(word.length(), new ArrayList<String>());
        list.add(word);
        map.put(word.length(), list);
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if(!map.containsKey(word.length())){
            return false;
        }
        for(String s: map.get(word.length())){
            if(helper(s, word)){
                return true;
            }
        }
        return false;
    }

    private boolean helper(String s, String word){
        for(int i =0, j = 0; i < s.length(); i++, j++){
            if(word.charAt(j) == '.'){
                continue;
            }
            if(s.charAt(i) != word.charAt(j)){
                return false;
            }
        }
        return true;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
