/*
给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

*/

/*
方法一：深度优先遍历 DFS
注意这里的grid是char数组，要判断grid[i][j] == '1' 而不是 1，在dfs方法内判断return时要注意不仅要marked[i][j] == true 还要判断grid[i][j] == '0'
*/


class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        boolean[][] marked = new boolean[grid.length][grid[0].length];
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(!marked[i][j] && grid[i][j] == '1'){
                    count++;
                    dfs(grid, marked, i, j);
                }
            }
        }
        return count;
    }
    
    public void dfs(char[][] grid, boolean[][] marked, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || marked[i][j] || grid[i][j] == '0'){
            return;
        }
        marked[i][j] = true;
        dfs(grid, marked, i + 1, j);
        dfs(grid, marked, i - 1, j);
        dfs(grid, marked, i, j + 1);
        dfs(grid, marked, i, j - 1);
    }
}


/*
方法二：广度优先遍历 BFS
广度优先遍历不需要回溯
广度优先遍历使用队列保存可能到达的元素，然后依次出队列并算出队列的值的可能路径，可能的路径一次入队列
注意队列一定要在入队列时就标记已使用，因为这个元素很可能马上被即将出队列的其他元素的路径经过
如果在出队列时再标记，会有很多重复的队列被计算，时间复杂度会超标
*/

class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        boolean[][] marked = new boolean[grid.length][grid[0].length];
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1' && !marked[i][j]){
                    count++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.offer(i*grid[0].length + j);
                    marked[i][j] = true;
                    while(!queue.isEmpty()){
                        int temp = queue.poll();
                        int row = temp/grid[0].length;
                        int col = temp%grid[0].length;
                        if(row - 1 >= 0 && !marked[row - 1][col] && grid[row - 1][col] == '1'){
                            queue.offer((row - 1)*grid[0].length + col);
                            marked[row - 1][col] = true;
                        }
                        if(row + 1 < grid.length && !marked[row + 1][col] && grid[row + 1][col] == '1'){
                            queue.offer((row + 1)*grid[0].length + col);
                            marked[row + 1][col] = true;
                        }
                        if(col - 1 >= 0 && !marked[row][col - 1] && grid[row][col - 1] == '1'){
                            queue.offer(row * grid[0].length + col - 1);
                            marked[row][col - 1] = true;
                        }
                        if(col + 1 < grid[0].length && !marked[row][col + 1] && grid[row][col + 1] == '1'){
                            queue.offer(row * grid[0].length + col + 1);
                            marked[row][col + 1] = true;
                        }
                    }
                }
            }
        }
        return count;
    }
}
