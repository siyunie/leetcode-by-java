/*
给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

*/

/*
方法一：深度优先遍历
注意这里的grid是char数组，要判断grid[i][j] == '1' 而不是 1，在dfs方法内判断return时要注意不仅要marked[i][j] == true 还要判断grid[i][j] == '0'
*/


class Solution {
    public int numIslands(char[][] grid) {
        if(grid.length == 0){
            return 0;
        }
        boolean[][] marked = new boolean[grid.length][grid[0].length];
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(!marked[i][j] && grid[i][j] == '1'){
                    count++;
                    dfs(grid, marked, i, j);
                }
            }
        }
        return count;
    }
    
    public void dfs(char[][] grid, boolean[][] marked, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || marked[i][j] || grid[i][j] == '0'){
            return;
        }
        marked[i][j] = true;
        dfs(grid, marked, i + 1, j);
        dfs(grid, marked, i - 1, j);
        dfs(grid, marked, i, j + 1);
        dfs(grid, marked, i, j - 1);
    }
}
