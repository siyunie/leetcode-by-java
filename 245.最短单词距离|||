/*
给定一个单词列表和两个单词 word1 和 word2，返回列表中这两个单词之间的最短距离。

word1 和 word2 是有可能相同的，并且它们将分别表示为列表中两个独立的单词。

示例:
假设 words = ["practice", "makes", "perfect", "coding", "makes"].

输入: word1 = “makes”, word2 = “coding”
输出: 1
输入: word1 = "makes", word2 = "makes"
输出: 3
注意:
你可以假设 word1 和 word2 都在列表里。

*/

/*
方法一:第243题方法修改
因为这个方法不像第244题会传入一个很大的数组,并重复对这个数组反复调用,所以考虑使用第243题方法
增加一个判断word1和word2是否相等,如不等,直接使用第243题方法,如果相等,则维持一个boolean值flag,保证交替对left和right赋值即可

*/

class Solution {
    public int shortestWordDistance(String[] words, String word1, String word2) {
        int left = -1;
        int right = -1;
        int minDistance = words.length;
        if(word1.equals(word2)){
            boolean flag = false;
            for(int i = 0; i < words.length; i++){
                if(words[i].equals(word1) && !flag){
                    left = i;
                    flag = true;
                }else if(words[i].equals(word1) && flag){
                    right = i;
                    flag = false;
                }
                if(left != -1 && right != -1){
                    minDistance = Math.min(minDistance, Math.abs(right - left));
                }
            }
        }else{
            for(int i = 0; i < words.length; i++){
                if(words[i].equals(word1)){
                    left = i;
                }else if(words[i].equals(word2)){
                    right = i;
                }
                if(left != -1 && right != - 1){
                    minDistance = Math.min(minDistance, Math.abs(right - left));
                }
            }
        }
        return minDistance; 
    }  
}
