/*
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:

输入: [1,2,3]
输出: [1,2,4]
解释: 输入数组表示数字 123。
示例 2:

输入: [4,3,2,1]
输出: [4,3,2,2]
解释: 输入数组表示数字 4321。

*/

/*
方法一:直接操作数组

题目规定除0外其余数的开头不会为0
当 当前位数字为9时需要考虑进位问题
直接从后往前遍历,只要此位数不为9,直接加一并返回,不然将其置为0,继续遍历
如果遍历完成还未返回,说明此数的前面所有值均为9,即99,999等
此时直接新建一个数组,并将首位置为1输出即可

*/


class Solution {
    public int[] plusOne(int[] digits) {
        for(int i = digits.length - 1; i >= 0; i--){
            if(digits[i] != 9){
                digits[i]++;
                return digits;
            }
            digits[i] = 0;
        }
        int[] newDigits = new int[digits.length + 1];
        newDigits[0] = 1;
        return newDigits;
    }
}
