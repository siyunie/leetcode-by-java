/*
根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

*/

/*
方法一：递归
前序遍历的首节点一定是根节点
找到中序遍历的根节点，左边为左子树，右边为右子树，递归求子树的左子树和右子树
*/

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0){
            return null;
        }
        TreeNode root = new TreeNode(preorder[0]);
        for(int i = 0; i < inorder.length; i++){
            if(inorder[i] == preorder[0]){
                root.left = buildTree(Arrays.copyOfRange(preorder,1,i+1),
                                     Arrays.copyOfRange(inorder,0,i));
                root.right = buildTree(Arrays.copyOfRange(preorder,i+1,preorder.length),
                                     Arrays.copyOfRange(inorder,i+1,inorder.length));
                break;    
            }
        }
        return root;
    }
}

/*
方法二：改进递归
用hashmap保存中序数组inorder的值与索引，这样每次查找根的时候不用再去中序遍历数组inorder里遍历
同时使用索引来递归，避免copyOfRange拷贝数组的资源消耗
*/

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        return helper(preorder, 0, preorder.length, inorder, 0, inorder.length, map);
    }
    public TreeNode helper(int[] preorder, int pstart, int pend, int[] inorder, int istart, int iend, 
                        Map<Integer,Integer> map){
        if(pstart == pend){
            return null;
        }
        TreeNode root = new TreeNode(preorder[pstart]);
        int index = map.get(preorder[pstart]);
        int len = index - istart;
        root.left = helper(preorder, pstart + 1, pstart + 1 + len, inorder, istart, index, map);
        root.right = helper(preorder, pstart + 1 + len, pend, inorder, index+1, iend, map);
        return root;
    }
}
