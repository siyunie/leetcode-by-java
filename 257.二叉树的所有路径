/*
给定一个二叉树，返回所有从根节点到叶子节点的路径。

说明: 叶子节点是指没有子节点的节点。

示例:

输入:

   1
 /   \
2     3
 \
  5

输出: ["1->2->5", "1->3"]

解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3

*/

/*
方法一:递归 避免回溯
每次不修改str的值,而是传入str + "->" + root.left.val或str + "->" + root.right.val
避免回溯时需要重置状态

*/

class Solution {
    List<String> list;
    public List<String> binaryTreePaths(TreeNode root) {
        list = new ArrayList<>();
        if(root == null){
            return list;
        }
        String str = String.valueOf(root.val);
        helper(root, str);
        return list;
    }
    private void helper(TreeNode root, String str){
        if(root.left == null && root.right == null){
            list.add(str);
            return;
        }
        if(root.left != null){
            helper(root.left, str + "->" + root.left.val);
        }
        if(root.right != null){
            helper(root.right, str + "->" + root.right.val);
        }
    }
}

/*
方法二:方法一另一种写法
注意一定不能用StringBuilder,而是要使用String,使用StringBuilder每次回溯时都必须重置状态,而String每次+都是新建一个新的String,因此不用重置状态

*/

class Solution {
    List<String> list;
    public List<String> binaryTreePaths(TreeNode root) {
        list = new ArrayList<>();
        if(root == null){
            return list;
        }
        String str = new String();
        helper(root, str);
        return list;
    }
    private void helper(TreeNode root, String str){
        if(root == null){
            return;
        }
        str += root.val;
        if(root.left == null && root.right == null){
            list.add(str);
            return;
        }else{
            str += "->";
            helper(root.left, str);
            helper(root.right, str);
        }
    }
}
