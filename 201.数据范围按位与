/*
给定范围 [m, n]，其中 0 <= m <= n <= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。

示例 1: 

输入: [5,7]
输出: 4
示例 2:

输入: [0,1]
输出: 0

*/

/*
方法一:循环
直接循环与,但是超出时间,所以做判断,当res == 0时,之后再与任何值与都为0,所以直接break
注意这里要考虑包含2^31 - 1的情况,即Integer.MAX_VALUE时做完这轮的运算,i++超出int型范围,变为10000000000000000000000000000000即为-2^31的补码
此时i<=n了所以循环会继续,因此当i == Intger.MAX_VALUE时,因为Intger.MAX_VALUE与res与不影响结果(因为除符号位之外都是1,并且m到n范围无负数)
并且Intger.MAX_VALUE一定是最后一个数,所以直接break然后输出res即可

*/

class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        if(m == Integer.MAX_VALUE){
            return m;
        }
        int res = m;
        for(int i = m + 1; i <= n; i++){
            if(res == 0 || i == Integer.MAX_VALUE){
                break;
            }
            res = res & i;
        }
        return res;
    }
}
