/*
给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i 和 j 之间的差的绝对值最大为 ķ。

示例 1:

输入: nums = [1,2,3,1], k = 3, t = 0
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1, t = 2
输出: true
示例 3:

输入: nums = [1,5,9,1,5,9], k = 2, t = 3
输出: false

*/

/*
方法一:TreeSet+滑动窗口
维持一个大小为k的滑动窗口,因为要保证进出有序,并且能得到窗口内与当前数nums[i]的关系,所以考虑使用TreeSet
TreeSet.ceiling(target)得到大于等于target的最小值 不存在则返回空
TreeSet.floor(target)得到小于等于target的最大值 不存在则返回空
因此每次放入数nums[i]时 求出TreeSet.ceilling(nums[i] - t)与TreeSet.floor(nums[i] + t) 非空并范围在ceiling <= nums[i] 或 floor >= nums[i]
则说明存在 返回true
注意此处使用Long型是因为测试用例里有-2^31,此时nums[i] - t 超过int型范围,所以只能使用long型来存储数据

*/

class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums.length <= 0 || k <= 0 || t < 0){
            return false;
        }
        TreeSet<Long> set = new TreeSet<>();
        for(int i = 0; i < nums.length; i++){
            Long ceiling = set.ceiling((long)nums[i] - t);
            if(ceiling != null && ceiling <= nums[i]){
                return true;
            }
            Long floor = set.floor((long)nums[i] + t);
            if(floor != null && floor >= nums[i]){
                return true;
            }
            set.add((long)nums[i]);
            if(set.size() > k){
                set.remove((long)nums[i - k]);
            }
        }
        return false;
    }
}
