/*

编写一个程序，找到两个单链表相交的起始节点。

如下面的两个链表：



在节点 c1 开始相交。

 

示例 1：



输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
 

示例 2：



输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
输出：Reference of the node with value = 2
输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
 

示例 3：



输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
输出：null
输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
解释：这两个链表不相交，因此返回 null。
 

注意：

如果两个链表没有交点，返回 null.
在返回结果后，两个链表仍须保持原有的结构。
可假定整个链表结构中没有循环。
程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。
*/

/*
方法一：hashmap
第一反应，不考虑时间空间复杂度，使用hashmap存一个链表的节点，然后判断另一个节点存不存在map中即可
*/

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
       Map<ListNode, Integer> map = new HashMap<>();
        while(headA != null){
            map.put(headA, 0);
            headA = headA.next;
        }
        while(headB != null){
            if(map.containsKey(headB)){
                return headB;
            }else{
                headB = headB.next;
            }
        }
        return null;
    }
}

/*
方法二：双指针
为了满足时间空间复杂度要求，考虑使用双指针
pa指向a链表头，pb指向b链表头，同时开始走，当走到本链表尾时，开始第二次遍历从另一个链表头开始走，如果存在相交节点，必同时到达这个节点
如果不存在，则第二次遍历同时结束走到null

如果a,b链表长度不同
假设a链表长度为 x+y x为相交节点
b链表长度为 z+y z为相交节点 因为相交，所以相交之后长度一定相同
按以上方法 a指针走x+y+z b指针走z+y+x 正好在相交节点相遇

如果a,b链表长度相同
第一遍遍历就会同时到达相交节点
*/

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        ListNode pa = headA;
        ListNode pb = headB;
        while(pa != pb){
            pa = pa == null ? headB : pa.next;
            pb = pb == null ? headA : pb.next;
        }
        return pa;
    }
}


