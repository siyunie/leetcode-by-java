/*
给定一个用字符数组表示的 CPU 需要执行的任务列表。其中包含使用大写的 A - Z 字母表示的26 种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。CPU 在任何一个单位时间内都可以执行一个任务，或者在待命状态。

然而，两个相同种类的任务之间必须有长度为 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。

你需要计算完成所有任务所需要的最短时间。

示例 1：

输入: tasks = ["A","A","A","B","B","B"], n = 2
输出: 8
执行顺序: A -> B -> (待命) -> A -> B -> (待命) -> A -> B.
注：

任务的总个数为 [1, 10000]。
n 的取值范围为 [0, 100]。

*/

/*
方法一:转换为数学问题
先插最多的那个任务,假设tasks = ["A","A","A","B","B","B"], n = 2
A X X A X X A 此时长度为 (n+1)*(N-1)+1  N为A数量
然后插下一个任务,当此任务数量跟最多的那个任务相同时,则最后一个A后需要再加一个任务,A B X A B X A B 此时长度为(n+1)*(N-1)+1+1 
有n个最长任务,就需要多加n
当任务的数量小于最多的任务是,随便找空插一定间隔大于n,所以不影响结果

此时有一种例外,任务数量过多,n太小,n间隔插满了还没放完,如

AAABBBCCDD n=2 按上面计算为8 但实际为10 即应该直接返回队列长度

*/

class Solution {
    public int leastInterval(char[] tasks, int n) {
        if(tasks.length <= 1 || n < 1){
            return tasks.length;
        }
        int[] rec = new int[26];
        for(char task: tasks){
            rec[task - 'A']++;
        }
        Arrays.sort(rec);
        int res = (rec[25] - 1)*(n + 1) + 1;
        for(int i = 24; i >= 0; i--){
            if(rec[i] == rec[25]){
                res++;
            }
        }
        if(res < tasks.length){
            return tasks.length;
        }
        return res;
    }
}
