/*
统计所有小于非负整数 n 的质数的数量。

示例:

输入: 10
输出: 4
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。

*/

/*
方法一:暴力改进
一开始暴力时间超出范围,然后考虑改进,当前数n是否为质数,只用判断2到根号n能否被n整除即可
因为比如 12 
12 = 2*6
12 = 3*4
12 = 根号12 * 根号12
12 = 4*3
12 = 6*2
这样可以避免重复计算

*/

class Solution {
    public int countPrimes(int n) {
        if(n <= 1){
            return 0; 
        }
        int res = 0;
        for(int i = 2; i < n; i++){
            if(helper(i)){
                res++;
            }
        }
        return res;
    }
    private boolean helper(int n){
        for(int i = 2; i*i <= n; i++){
            if((n % i) == 0){
                return false;
            }
        }
        return true;
    }
}

/*
方法二:记忆化数组
改进暴力,记忆化数组保存是否为质数,循环给memo赋值时,i的整数倍一定不可能是质数,因此将其置true
同时赋值过程只用到sqrt(n),因为当进行到sqrt(n)时,后面的值都已经被计算过是否为质数了

*/

class Solution {
    public int countPrimes(int n) {
        if(n <= 1){
            return 0; 
        }
        int res = 0;
        boolean[] memo = new boolean[n];
        for(int i = 2; i <= Math.sqrt(n); i++){
            if(memo[i]){
                continue;
            }
            for(int j = i*2; j < n; j += i){
                memo[j] = true;
            }
        }
        for(int i = 2; i < n; i++){
            if(!memo[i]){
                res++;
            }
        }
        return res;
    }
}
