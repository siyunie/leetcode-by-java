/*
实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。

*/

/*
方法一：利用hashset
*/

class Trie {
    private Set<String> set;
    /** Initialize your data structure here. */
    public Trie() {
        set = new HashSet<>();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        set.add(word);    
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        return set.contains(word);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        int len = prefix.length();
        if(len == 0){
            return true;
        }
        for(String str: set){
            if(str.length() >= len && str.substring(0, len).equals(prefix)){
                return true;
            }
        }
        return false;
    }
}


/*
方法二:构造前缀树
构造前缀树节点
每个前缀树节点都有一个自己的大小为26的节点数组，代表26个小写字母
*/

class TrieNode{
    private TrieNode[] link;
    private int R = 26;
    private boolean isEnd;
    public TrieNode(){
        link = new TrieNode[R];
    }
    
    public boolean contains(char ch){
        if(link[ch - 'a'] != null){
            return true;
        }
        return false;
    }
    
    public TrieNode get(char ch){
        return link[ch - 'a'];
    }
    
    public void put(char ch, TrieNode node){
        link[ch - 'a'] = node;
    }
    
    public boolean isEnd(){
        return isEnd;
    }
    
    public void setEnd(){
        isEnd = true;
    }
}

class Trie {
    private TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(!node.contains(ch)){
                node.put(ch, new TrieNode());
            }
            node = node.get(ch);
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode node = root;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(!node.contains(ch)){
                return false;
            }
            node = node.get(ch);
        }
        return node.isEnd();
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode node = root;
        for(int i = 0; i < prefix.length(); i++){
            char ch = prefix.charAt(i);
            if(!node.contains(ch)){
                return false;
            }
            node = node.get(ch);
        }
        return true;
    }
}

/*
方法三：构造简化
直接在Trie中构造，不用重新定义TrieNode
*/

class Trie {
    private int size = 26;
    private Trie[] tires;
    private boolean isEnd;

    /** Initialize your data structure here. */
    public Trie() {
        tires = new Trie[size];
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Trie node = this;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.tires[ch-'a'] == null){
                node.tires[ch - 'a'] = new Trie();
            }
            node = node.tires[ch - 'a'];
        }
        node.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie node = this;
        for(int i = 0; i < word.length(); i++){
            char ch = word.charAt(i);
            if(node.tires[ch-'a'] == null){
                return false;
            }
            node = node.tires[ch - 'a'];
        }
        return node.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie node = this;
        for(int i = 0; i < prefix.length(); i++){
            char ch = prefix.charAt(i);
            if(node.tires[ch-'a'] == null){
                return false;
            }
            node = node.tires[ch - 'a'];
        }
        return true;
    }
}
