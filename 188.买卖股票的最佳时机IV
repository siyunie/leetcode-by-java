/*
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
示例 2:

输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

*/

/*
方法一：动态规划
注意此时要判断k>prices.length/2，即当k大于二分之总天数的时候，因为买卖一轮需要两天
所以当k>prices.length/2时，k无意义，需要当成不限交易次数的情况来做，不然建立的dp数组太大，会超出内存限制报错
*/

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length==0){
            return 0;
        }
        if((k/2) > (prices.length/2)){
            return maxProfit(prices);
        }
        int[][][] dp = new int[prices.length][k+1][2];
        for(int i = 0; i < prices.length; i++){
            for(int j = 1; j <= k; j++){
                if(i == 0){
                    dp[i][j][0] = 0;
                    dp[i][j][1] = -prices[0];
                }else{
                    dp[i][j][0] = Math.max(dp[i-1][j][0], dp[i-1][j][1] + prices[i]);
                    dp[i][j][1] = Math.max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i]);
                }
            }
        }
        return dp[prices.length-1][k][0];  
    }
    
    public int maxProfit(int[] prices){
        int dp0 = 0;
        int dp1 = -prices[0];
        for(int i = 0; i < prices.length; i++){
            dp0 = Math.max(dp0, dp1 + prices[i]);
            dp1 = Math.max(dp1, dp0 - prices[i]);
        }
        return dp0;
    }
}


//

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k >= prices.length/2){
            return maxProfit(prices);
        }
        int[][][] dp = new int[prices.length + 1][2][k + 1];
        for(int i = 0; i <= k; i++){
            dp[0][1][i] = Integer.MIN_VALUE;
        }
        for(int i = 1; i <= prices.length; i++){
            for(int j = k; j > 0; j--){
                dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i - 1]);
                dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j - 1] - prices[i - 1]);
            }
        }
        return dp[prices.length][0][k];
    }
    private int maxProfit(int[] prices){
        int[][] dp = new int[prices.length + 1][2];
        dp[0][1] = Integer.MIN_VALUE;
        for(int i = 1; i <= prices.length; i++){
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i - 1]);
            
        }
        return dp[prices.length][0];
    }
}

//

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k >= prices.length/2){
            return maxProfit(prices);
        }
        int[][][] dp = new int[prices.length + 1][2][k + 1];
        for(int i = 0; i <= k; i++){
            dp[0][1][i] = Integer.MIN_VALUE;
        }
        for(int i = 1; i <= prices.length; i++){
            for(int j = 0; j < k; j++){
                dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i - 1]);
                dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j + 1] - prices[i - 1]);
            }
        }
        return dp[prices.length][0][0];
    }
    private int maxProfit(int[] prices){
        int[][] dp = new int[prices.length + 1][2];
        dp[0][1] = Integer.MIN_VALUE;
        for(int i = 1; i <= prices.length; i++){
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i - 1]);
            
        }
        return dp[prices.length][0];
    }
}

//

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k >= prices.length/2){
            return maxProfit(prices);
        }
        int[][][] dp = new int[prices.length + 1][2][k + 1];
        for(int i = 0; i <= k; i++){
            dp[0][1][i] = Integer.MIN_VALUE;
        }
        for(int i = 1; i <= prices.length; i++){
            for(int j = k - 1; j >= 0; j--){
                dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i - 1]);
                dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j + 1] - prices[i - 1]);
            }
        }
        return dp[prices.length][0][0];
    }
    private int maxProfit(int[] prices){
        int[][] dp = new int[prices.length + 1][2];
        dp[0][1] = Integer.MIN_VALUE;
        for(int i = 1; i <= prices.length; i++){
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i - 1]);
            
        }
        return dp[prices.length][0];
    }
}
