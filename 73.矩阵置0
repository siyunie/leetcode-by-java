/*
给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。

示例 1:

输入: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
输出: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]
示例 2:

输入: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
输出: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]
进阶:

一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
你能想出一个常数空间的解决方案吗？

*/

/*
方法一:把每行第一个数和每列第一个数作为标志位
要求原地算法,所以只能原地修改数组
遍历数组两次
第一次遇到为0的数,即把此数对应的行的第一个数即matrix[i][0]与对应列第一个数matrix[0][j]置为0
注意此时[0][0]作为标志位时,代表第一行和第一列,冲突,所以令[0][0]代表第一行,并单独用一个boolean值代表是否需要将第一列置0
所以第一次遍历时,每轮遍历,先判断matrix[i][0]是否为0,然后j从1开始遍历,因为第一列即j=0已经在前面判断过了

第二次遍历数组,从i=1,j=1开始遍历,只要对应的matrix[i][0]或matrix[0][j]为0,将当前数置0
然后单独判断[0][0]是否为0,为0则将第一行置0
最后判断Boolean值是否为true,为true则将第一列置0

*/

class Solution {
    public void setZeroes(int[][] matrix) {
        boolean isFirstCol = false;
        for(int i = 0; i < matrix.length; i++){
            if(matrix[i][0] == 0){
                isFirstCol = true;
            }
            for(int j = 1; j < matrix[0].length; j++){
                if(matrix[i][j] == 0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        for(int i = 1; i < matrix.length; i++){
            for(int j = 1; j <matrix[0].length; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
        if(matrix[0][0] == 0){
            for(int j = 1; j < matrix[0].length; j++){
                matrix[0][j] = 0;
            }
        }
        if(isFirstCol){
            for(int i = 0; i < matrix.length; i++){
                matrix[i][0] = 0;
            }
        }
    }
}
