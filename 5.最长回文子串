给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"


/*回文字符串的反串跟正串相同
动态规划，用空间换时间，dp[][]记录正串反串相同时的长度，与反串相同时dp[i][j]=dp[i-1][j-1]+1，当i==0||j==0单独赋值dp[i][j]=1，
最后还要判断反串的最后字符索引反转成正串时是否索引跟正串相同，防止出现“abc832942cba”这种情况*/
class Solution {
    public String longestPalindrome(String s) {
        //动态规划
        int len=s.length();
        if(len==0){
            return "";
        }
        int[][] dp=new int[len][len];
        int max=0;
        int temp=0;
        String reverse=new StringBuffer(s).reverse().toString();
        for(int i=0;i<len;i++){
            for(int j=0;j<len;j++){
                if(s.charAt(i)==reverse.charAt(j)){
                    if(i==0||j==0){
                        dp[i][j]=1;
                    }else{
                        dp[i][j]=dp[i-1][j-1]+1;
                    }
                }
                if(dp[i][j]>max){
                    if((len-1-j)+dp[i][j]-1==i){//判断是否真的是回文串
                        max=dp[i][j];
                        temp=i;
                    }
                }
            }
        }
        return s.substring(temp-max+1,temp+1);
    }
}
