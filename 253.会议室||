/*
给定一个会议时间安排的数组，每个会议时间都会包括开始和结束的时间 [[s1,e1],[s2,e2],...] (si < ei)，为避免会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排。

示例 1:

输入: [[0, 30],[5, 10],[15, 20]]
输出: 2
示例 2:

输入: [[7,10],[2,4]]
输出: 1

*/

/*
方法一：最小堆
想法：当一个组要开会时，先找有无空会议室，找到第一个空会议室则使用，不关心其余会议室是否空，未找到则新开一间
用priorityqueue建立最小堆，将会议室间按开始时间升序排列，将其按排序后顺序依次加入到最小堆中，最小堆中存储结束时间
当堆顶的结束时间小于新加入会议的开始时间时，说明在工作的会议室中，有空闲，将堆顶移除，加入新会议时间
否则说明最早结束的会议都还未结束，新会议必须新开会议室
最后返回最小堆的大小即为最少需要的会议室数量
*/

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length == 0){
            return 0;
        }

        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                return o1[0] - o2[0];
            }
        });
        
        Queue<Integer> queue = new PriorityQueue<>();
        queue.add(intervals[0][1]);
        for(int i = 1; i < intervals.length; i++){
            if(queue.peek() <= intervals[i][0]){
                queue.poll();
            }
            queue.offer(intervals[i][1]);
        }
        return queue.size();
    }
}

/*
方法二：分别存储开始时间和结束时间，将这两个数组均置为升序，因为我们不关心结束的会议的开始时间是多少，只要结束了就可以放入新会议，并且会议的开始时间一定早于结束时间
所以开始时间数组start[i]>=end[j]说明i会议在j会议结束后开始，可以使用j会议的房间，并且i++,j++
否则 i++,room++
*/

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if(intervals.length == 0){
            return 0;
        }
        int[] start = new int[intervals.length];
        int[] end = new int[intervals.length];
        for(int i = 0;i < intervals.length; i++){
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        
        Arrays.sort(start);
        Arrays.sort(end);

        int startp = 0, endp = 0, size = 0;

        while(startp < intervals.length){
            if(start[startp] >= end[endp]){
                startp++;
                endp++;
            }else{
                startp++;
                size++;
            }
        }
        return size;
    }
}
