/*
编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例: 

输入: 19
输出: true
解释: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

*/

/*
方法一:暴力循环+set存储结果
当当前数在set里已经存在则说明无限循环但再也到不了1,直接返回false

*/

class Solution {
    public boolean isHappy(int n) {
        Set<Integer> set = new HashSet<>();
        set.add(n);
        while(n != 1){
            n = helper(n);
            if(set.contains(n)){
                return false;
            }
            set.add(n);
        }
        return true;
    }

    private int helper(int n){
        int tmp = 0;
        while(n != 0){
            tmp += Math.pow(n%10, 2);
            n /= 10;
        }
        return tmp;
    }
}

/*
方法二:暴力+快慢指针
不用set存储结果,用快慢指针来避免循环,fast每次做两次,slow每次做一次,如果相等且不为1说明无限循环,输出false

*/

class Solution {
    public boolean isHappy(int n) {
        int slow = helper(n);
        int fast = helper(slow);
        if(fast == 1 || slow == 1){
            return true;
        }
        while(fast != 1 || slow != 1){
            fast = helper(helper(fast));
            slow = helper(slow);
            if(slow == fast && slow != 1){
                return false;
            }
        }
        return true;
    }

    private int helper(int n){
        int tmp = 0;
        while(n != 0){
            tmp += Math.pow(n%10, 2);
            n /= 10;
        }
        return tmp;
    }
}
