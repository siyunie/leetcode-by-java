/*

给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。



在杨辉三角中，每个数是它左上方和右上方的数的和。

示例:

输入: 5
输出:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

*/

/*
方法一:类动态规划
用动态规划的思想,每一行都是由前面一行推导得到的,对每一行的第一个数和最后一个数都赋值1,其余数都为上一行对应位置的数与上一行对应位置的前一个数相加得到

注意不要把它想成是等腰三角形,想成直角三角形更好理解 即
[1],
[1,1],
[1,2,1],
[1,3,3,1],         
[1,4,6,4,1]

这样对每一行赋值等于前一行两数相加更直观

*/

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<>();
        if(numRows < 1){
            return res;
        }
        res.add(new ArrayList<>());
        res.get(0).add(1);

        for(int i = 1; i < numRows; i++){
            ArrayList<Integer> tmp = new ArrayList<>();
            tmp.add(1);
            for(int j = 1; j < i; j++){
                tmp.add(res.get(i - 1).get(j) + res.get(i - 1).get(j - 1));
            }
            tmp.add(1);
            res.add(tmp);
        }
        return res;
    }
}
