/*
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。
示例:

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。
*/

/*
方法一：递归，利用hashmap存放数字与字符串对应map，每次取数字字符串的第一个，找到对应字符串，遍历字符串，每个单个字母递归
直到数字长度为0时，得到一种情况，记录
*/

class Solution {
    HashMap<String,String> hash=new HashMap<String,String>(){{
            put("2","abc");
            put("3","def");
            put("4","ghi");
            put("5","jkl");
            put("6","mno");
            put("7","pqrs");
            put("8","tuv");
            put("9","wxyz");
    }};
    List<String> result=new ArrayList<>();
    
    public List<String> letterCombinations(String digits) {
        if(digits.length()!=0){
            addLetter("",digits);
        }
        return result;
    }
    public void addLetter(String temp,String digits){
        if(digits.length()==0){
            result.add(temp);
        }else{
            String digit=digits.substring(0,1);
            String letters=hash.get(digit);
            for(int i=0;i<letters.length();i++){
                String letter=letters.substring(i,i+1);
                addLetter(temp+letter,digits.substring(1));
            }
        }
        
    }
}
