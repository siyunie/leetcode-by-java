/*
删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。

说明: 输入可能包含了除 ( 和 ) 以外的字符。

示例 1:

输入: "()())()"
输出: ["()()()", "(())()"]
示例 2:

输入: "(a)())()"
输出: ["(a)()()", "(a())()"]
示例 3:

输入: ")("
输出: [""]
*/

/*
方法一：BFS
过程：
使用队列，维持一个hashset，维持一个flag变量
先将整个字符串加入到队列中，判断是否有效，如有效将flag置为true，不再剪裁，否则依次剪裁一个括号(因为要求最长队列，所以每次只剪裁一个括号看是否有效)
然后用hashset对其判重，如果不重复则加入到队列中
直至队列为空，得到最终结果

hashset作用：
hashset判重，以免剪裁之后相同的字符串加入到结果中

flag作用(BFS的关键点)：
维持一个flag变量，只要第一个有效字符串出现，则再也不继续剪裁，此时，队列中至多只会有跟有效字符串相同长度的字符串和比有效字符串长度小1的字符串，即与有效字符串同一轮且排在有效字符串之前的字符串剪裁之后的下一轮字符串
因为要求最长有效字符串，所以当地一个有效字符串出现后，只有本轮字符串可能再出现有效字符串
但是队列中的下一轮字符串不用担心，因为有效字符串的括号数一定是偶数才能组成有效字符串，所以队列中可能存在的下一轮字符串的括号数均为奇数，所以无影响
先将整个字符串加入到队列中，判断是否有效，如有效将flag置为true，不再剪裁，否则依次剪裁一个括号，然后用hashset对其判重，如果不重复则加入到队列中
直至队列为空，得到最终结果
*/

class Solution {
    private boolean isValid(String s){
        int count = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                count++;
            }else if(s.charAt(i) == ')'){
                if(count > 0){
                    count --;
                }else{
                    return false;
                }
            }
        }
        return count == 0;
    }
    public List<String> removeInvalidParentheses(String s) {
        List<String> list = new ArrayList<>();
        if(s.equals("")){
            list.add(s);
            return list;
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(s);
        Set<String> hash = new HashSet<>();
        boolean flag = false;
        
        while(!queue.isEmpty()){
            String cur = queue.poll();
            if(isValid(cur)){
                flag = true;
                list.add(cur);
            }
            if(flag){
                continue;
            }
            String temp;
            for(int i = 0; i < cur.length(); i++){
                if(cur.charAt(i) == ')' || cur.charAt(i) == '('){
                    if(i == cur.length() - 1){
                        temp = cur.substring(0, i);
                    }else{
                        temp = cur.substring(0, i) + cur.substring(i+1);
                    }
                    if(hash.add(temp)){
                        queue.offer(temp);
                    }
                }
            }
        }
        if(list.size() == 0){
            list.add("");
        }
        return list;
    }
}
