/*
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

*/

/*
方法一：动态规划
dp数组保存最小个数，初始化dp为i，即最大个数为这个数全为1组成
动态转移方程为dp[i]=min(dp[i],dp[i-j*j]+1)，即由前面保存的dp加一个完全平法数j组成
注意此时dp初始化长度要为n+1，这样dp[0]有默认值0，满足数本身是平方数的情况，比如16 = 4*4 = dp[16-4*4]+1=dp[0]+1=1
*/

class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        for(int i = 1; i <= n; i++){
            dp[i] = i;
            for(int j = 1; i - j*j >= 0; j++){
                dp[i] = Math.min(dp[i], dp[i - j*j] + 1);
            }
        }
        return dp[n];
    }
}
