/*

给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 

示例:

给定 1->2->3->4, 你应该返回 2->1->4->3.

*/

/*
方法一:直接依次交换,维持temp节点作为进行交换的两节点的前节点

*/

class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode pre = new ListNode(0);
        pre.next = head;
        ListNode temp = pre;
        while(temp.next != null && temp.next.next != null){
            ListNode left = temp.next;
            ListNode right = temp.next.next;
            temp.next = right;
            left.next = right.next;
            right.next = left;
            temp = left;
        }
        return pre.next;
    }
}

//方法一更清晰实现 四个节点 preHead pre cur next 每次交换pre和cur即可

class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode pre = head;
        ListNode dummy = new ListNode(0);
        ListNode preHead = dummy;
        preHead.next = head;
        while(pre != null && pre.next != null){
            ListNode cur = pre.next;
            ListNode next = cur.next;
            pre.next = next;
            cur.next = pre;
            preHead.next = cur;
            preHead = pre;
            pre = next;
        }
        return dummy.next;
    }
}


/*
方法二:递归

*/

class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode next = head.next;
        head.next = swapPairs(next.next);
        next.next = head;
        return next;
    }
}
