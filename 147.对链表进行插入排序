/*

对链表进行插入排序。


插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。
每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。

 

插入排序算法：

插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。
每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。
重复直到所有输入数据插入完为止。
 

示例 1：

输入: 4->2->1->3
输出: 1->2->3->4
示例 2：

输入: -1->5->3->4->0
输出: -1->0->3->4->5

*/

/*
方法一:迭代
规定使用迭代
用pre节点保存头节点的前一节点,tmp = pre 来找大小顺序不对的节点应该插入的位置,插入完成后将tmp = pre 即将其复原到原位置(头节点的前一节点)

*/

class Solution {
    public ListNode insertionSortList(ListNode head) {
        if(head == null){
            return null;
        }
        ListNode pre = new ListNode(0);
        pre.next = head;
        ListNode cur = head;
        ListNode tmp = pre;
        while(cur != null){
            ListNode next = cur.next;    
            if(next != null && next.val < cur.val){
                while(tmp.next.val < next.val){
                    tmp = tmp.next;
                }
                ListNode tmpNext = tmp.next;
                cur.next = next.next;
                tmp.next = next;
                next.next = tmpNext;
                tmp = pre;
            }else{
                cur = cur.next;
            }
        }
        return pre.next;
    }
}
