/*
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 *整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

*/

/*
方法一:HashMap
注意避免同样的元素被使用, 要判断res[0] == res[1]
如果结果为重复数 比如 [2,2] target = 4 因为放入时会覆盖前面的,hashmap中最后只剩(2, 1)的key-value对
此时第二次循环时,因为是从头开始遍历,所以可以输出正确的值,判断target - nums[0] = 2存在直接输出 res[0] = i = 0; res[1] = map.get(target - nums[i]) = 1

*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        int[] res = new int[2];
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], i);
        }
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(target - nums[i])){
                res[0] = i;
                res[1] = map.get(target - nums[i]);
                if(res[0] == res[1]){
                    continue;
                }
                break;
            }
        }
        return res;
    }
}

/*
或者放入的时候直接判断,避免还要判断是否同样的元素被重复使用
此时如果遇到重复结果如[2,2] target = 4 再次放入2之前已经做了判断,发现key存在,直接indexs[1] = 1; indexs[0] = 0; 输出正确答案

*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] indexs = new int[2];
        HashMap<Integer,Integer> hash = new HashMap<Integer,Integer>();
        for(int i = 0; i < nums.length; i++){
            if(hash.containsKey(nums[i])){
                indexs[1] = i;
                indexs[0] = hash.get(nums[i]);
                return indexs;
            }
            hash.put(target-nums[i],i);
        }
        return indexs;
    }
}
