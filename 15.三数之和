/*
给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

/*
方法一：双指针
先对数组进行排序，然后维持两个指针left,right，分别指向三数中最小的数(nums[i])后面的一个数(nums[left])以及最后一个数(nums[right])
如果nums[i]>0说明三数最小大于零，此时sum不可能为0，直接跳出
此时如果nums[i]==nums[i-1] 需跳过这个数，因为前一个数已经计算过这种情况了
如果此时sum=0且nums[left]==nums[left+1],left++去重，如nus[right]==nums[right--],right--去重
如果sum<0，left右移
如果sum>0,right左移
时间复杂度O（n2）
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();
        if(nums.length<3){
            return list;
        }
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(nums[i]>0){
                break;
            }
            if(i>0&&nums[i]==nums[i-1]){
                continue;
            }
            int left=i+1,right=nums.length-1;
            while(left<right){     
                int sum=nums[i]+nums[left]+nums[right];
                if(sum==0){
                    list.add(Arrays.asList(nums[i],nums[left],nums[right]));
                    while(left<right&&nums[left]==nums[left+1]){
                        left++;
                    }
                    while(left<right&&nums[right]==nums[right-1]){
                        right--;
                    }
                    left++;
                    right--;
                }else if(sum<0){
                    left++;
                }else{
                    right--;
                }
            }
        }
        return list;
    }
}

/*
方法二:回溯法 + 剪枝
会超时

*/

class Solution {
    List<List<Integer>> list;
    public List<List<Integer>> threeSum(int[] nums) {
        list = new ArrayList<>();
        Arrays.sort(nums);
        helper(nums, 0, 0, 0, new Stack<Integer>());
        return list;
    }

    private void helper(int[] nums, int residual, int count, int start, Stack<Integer> stack){
        if(count == 3){
            if(residual == 0){
                list.add(new ArrayList<>(stack));
            }
            return;
        }
        int i = start;
        if(residual >= 0 && start < nums.length && nums[start] > 0){
            return;
        }
        for(; i < nums.length; i++){
            if(i > start && nums[i] == nums[i - 1]){
                continue;
            }
            stack.push(nums[i]);
            helper(nums, residual + nums[i], count + 1, i + 1, stack);
            stack.pop();
            if(residual >= 0 && nums[i] > 0){
                return;
            }
        }
    }
}
