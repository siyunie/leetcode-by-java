/*
给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 *-1。

示例 1:

输入: coins = [1, 2, 5], amount = 11
输出: 3 
解释: 11 = 5 + 5 + 1
示例 2:

输入: coins = [2], amount = 3
输出: -1
说明:
你可以认为每种硬币的数量是无限的。

*/

/*
方法一：动态规划
假设coins面额有1，2，5，假设最后一张为1或2或5，则dp[i] = min(dp[i-coins面额] + 1)
即总金额i的情况下，只用比较dp[i-coins面额]的大小
*/

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        for(int i = 1; i <= amount; i++){
            int temp = Integer.MAX_VALUE;
            for(int j = 0; j < coins.length; j++){
                if((i - coins[j]) >= 0 && dp[i - coins[j]] != Integer.MAX_VALUE){
                    temp = Math.min(temp, dp[i - coins[j]] + 1);
                }
            }
            dp[i] = temp;
        }
        return dp[amount] == Integer.MAX_VALUE ? -1:dp[amount];
    }
}

/*
方法二：深度优先遍历DFS+剪枝
金额从大到小取
注意此处剪枝过程，减少时间复杂度，count + amount/coins[index] >= min就直接return， 只要此情况下的硬币最小数量都大于之前已经算过的情况，直接返回
同时当可以被硬币金额整除时，更新min，因为金额是从大到小取的。
到了能整除的时候如果不选择直接整除的个数，继续下一轮的硬币面值一定小于现在这个能整除的面值，则硬币数量一定大于现在能整除的面值的个数，所以一定不是最优解
因此能整除时，直接整除
*/

class Solution {

    int min = Integer.MAX_VALUE;
    public int coinChange(int[] coins, int amount) {
        Arrays.sort(coins);
        helper(coins, amount, 0, coins.length - 1);
        return min == Integer.MAX_VALUE ? -1 : min; 
    }

    private void helper(int[] coins, int amount, int count, int index){
        if(index < 0 || count + amount/coins[index] >= min){
            return;
        }
        if(amount % coins[index] == 0){
            min = Math.min(min, count + amount/coins[index]);
        }
        for(int i = amount/coins[index]; i >= 0; i--){
            helper(coins, amount - i*coins[index], count + i, index - 1);
        }
    }
}
