/*
反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL
进阶:
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？

*/

/*
方法一：迭代
直接反转，保存前节点后节点，把当前节点的Next指向前节点
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode pre = null;
        ListNode cur = head;
        while(cur != null){
            ListNode next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
}

/*
方法二：递归
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        return reverse(head, null);
    }
    
    public ListNode reverse(ListNode cur, ListNode pre){
        if(cur == null){
            return pre;
        }
        ListNode next = cur.next;
        cur.next = pre;
        return reverse(next, cur);
    }
}

/*
方法三:另一种递归
终止条件:head为空,或者head.next为空
返回值:因为题目最终要输出新链表的头节点,所以每次递归返回反转后此节点的前节点
本次递归做什么: 此时链表为 未反转链表->head->已反转链表 本次递归要将其变为 未反转链表->head<-已反转链表
所以head.next.next = head 然后将head.next = null 避免形成环
因为返回值为反转后此节点的前节点,所以提前用 p = reverseList(head.next) 保存上次反转的尾节点即此次反转的节点的前节点,然后将其返回
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode p = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return p;
    }
}
