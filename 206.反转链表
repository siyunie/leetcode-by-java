/*
反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL
输出: 5->4->3->2->1->NULL
进阶:
你可以迭代或递归地反转链表。你能否用两种方法解决这道题？

*/

/*
方法一：迭代
直接反转，保存前节点后节点，把当前节点的Next指向前节点
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode pre = null;
        ListNode cur = head;
        while(cur != null){
            ListNode next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
}

/*
方法二：递归
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        return reverse(head, null);
    }
    
    public ListNode reverse(ListNode cur, ListNode pre){
        if(cur == null){
            return pre;
        }
        ListNode next = cur.next;
        cur.next = pre;
        return reverse(next, cur);
    }
}

/*
方法三：另一种递归
head.next.next=head,意思是将head的Next节点的下一节点接到head,此时head与head的next节点互相指向对方
然后把head.next 指向null,断开head节点的指向，完成head和下一节点的反转
p节点一直为最后一个节点,不会改变,因为p是递归到最后head.next == null时返回的head,并且之后递归回去没有改变过p
所以p一直是原链表的尾节点,新链表头节点
*/

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode p = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return p;
    }
}
