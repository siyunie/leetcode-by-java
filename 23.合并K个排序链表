/*
合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

*/

/*
方法一：分治归并 将多个链表分成两个链表一组，对每组的两个链表合并成一个链表，然后不断归并
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }else if(lists.length==1){
            return lists[0];
        }else if(lists.length==2){
            return merge2Lists(lists[0],lists[1]);
        }else{
            int mid=lists.length/2;
            ListNode[] l1=new ListNode[mid];
            ListNode[] l2=new ListNode[lists.length-mid];
            for(int i=0;i<mid;i++){
                l1[i]=lists[i];
            }
            for(int i=0;i<lists.length-mid;i++){
                l2[i]=lists[mid+i];
            }
            return merge2Lists(mergeKLists(l1),mergeKLists(l2));
        }
        
    }
    public ListNode merge2Lists(ListNode l1,ListNode l2){
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        ListNode head;
        if(l1.val<=l2.val){
            head=l1;
            head.next=merge2Lists(l1.next,l2);
        }else{
            head=l2;
            head.next=merge2Lists(l1,l2.next);
        }
        return head;
    }
}

/*
方法二:小顶堆
维持一个小顶堆,放入数组所有的节点,每次poll()出堆顶ListNode,当作下一个节点,并判断有无next节点,有的话将next节点加入堆中

*/


class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        if(lists.length == 1){
            return lists[0];
        }
        PriorityQueue<ListNode> queue = new PriorityQueue<>(new Comparator<ListNode>(){   //或者 PriorityQueue<ListNode> queue = new PriorityQueue<>((n1, n2) -> (n1.val - n2.val));
            public int compare(ListNode l1, ListNode l2){
                return l1.val - l2.val;
            }
        });
        for(ListNode l: lists){
            if(l != null){
                queue.offer(l);
            }
        }
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        while(queue.size() != 0){
            ListNode tmp = queue.poll();
            cur.next = tmp;
            cur = cur.next;
            if(tmp.next != null){
                queue.offer(tmp.next);
            }
        }
        return dummy.next;
    }
}





