/*
给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。

字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。

说明：

字母异位词指字母相同，但排列不同的字符串。
不考虑答案输出的顺序。
示例 1:

输入:
s: "cbaebabacd" p: "abc"

输出:
[0, 6]

解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的字母异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的字母异位词。
 示例 2:

输入:
s: "abab" p: "ab"

输出:
[0, 1, 2]

解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的字母异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的字母异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的字母异位词。

*/

/*
方法一:滑动窗口
用一个长度26的int型数组储存p的所有字母出现的次数,因为只要求判断是不是异位词,而不用记录异位词,所以只要滑动窗口内对应字母出现的次数和p数组一样就可以
用一个同样长度26的int型数组储存s的与p长度相同的顺序字母作为滑动窗口,判断是否相同,然后窗口后移,移除头部出窗口的字符,再次判断,直至到s字符串尾部
*/

class Solution {
    private boolean helper(int[] parr, int[] sarr){
        for(int i = 0; i<26; i++){
            if(parr[i] != sarr[i]){
                return false;
            }
        }
        return true;
    }

    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new LinkedList<>();
        if(s.length() < p.length()){
            return res;
        }
        int[] parr = new int[26];
        int[] sarr = new int[26];
        for(char c: p.toCharArray()){
            parr[c - 'a']++;
        }
        for(int i = 0; i < p.length() - 1; i++){
            sarr[s.charAt(i) - 'a']++;
        }
        for(int i = p.length() - 1; i < s.length(); i++){
            sarr[s.charAt(i) - 'a']++;
            if(helper(parr, sarr)){
                res.add(i - p.length() + 1);
            }
            sarr[s.charAt(i - p.length() + 1) - 'a']--;
        }
        return res;
    }
}
