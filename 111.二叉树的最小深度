/*
给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明: 叶子节点是指没有子节点的节点。

示例:

给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.

*/

/*
方法一:递归
终止条件:root为null 返回深度0. 注意此时还要考虑二叉树如2->1这种情况,当节点只有一个子节点,另一个子节点为空时,不能返回空节点作为最短路径
因为叶节点定义为左右子节点都为空,所以对这种情况要特殊考虑返回left+right+1,left或right有一个值为0,即那个空的节点值为0

*/

class Solution {
    public int minDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        if(root.left == null || root.right == null){
            return left + right + 1;
        }
        return Math.min(left, right) + 1;
    }
}
