

/*
方法一: 双数组,有点类似于贪心算法
规则: 1.左规则,如果当前评分高于左边,则当前糖果一定高于左边,此时贪心每次只取局部最优解,令此时糖果为左边加1
      2.右规则,如果当前评分高于右边,则当前糖果一定高于右边,此时贪心每次只取局部最优解,令此时糖果为右边加1
维持两个数组left与right 分别记录当前位置的糖果情况,初始值都为1. left实现左规则,right实现右规则. 最后取每处left与right的最大值即可
从左到右更新left 当当前位置的评分高于左边时, 将其更新为left[i - 1] + 1,不然维持初始值1 (因为从左到右遍历,遍历到此处时 left[i]一定<=left[i-1])
然后从右到左更新right 当当前位置的评分高于右边时, 将其更新为right[i + 1] + 1,不然维持初始值1
最后对每个位置取max(left[i], right[i])即为此位置糖果数的最终结果

*/

class Solution {
    public int candy(int[] ratings) {
        if(ratings.length == 0){
            return 0;
        }
        int[] left = new int[ratings.length];
        int[] right = new int[ratings.length];
        Arrays.fill(left, 1);
        Arrays.fill(right, 1);
        for(int i = 1; i < ratings.length; i++){
            if(ratings[i] > ratings[i - 1]){
                left[i] = left[i - 1] + 1;
            }
        }
        for(int i = ratings.length - 2; i >= 0; i--){
            if(ratings[i] > ratings[i + 1]){
                right[i] = right[i + 1] + 1;
            }
        }
        int res = 0;
        for(int i = 0; i < ratings.length; i++){
            if(left[i] > right[i]){
                res += left[i];
            }else{
                res += right[i];
            }
        }
        return res;
    }
}

/*
方法二:单数组
简化上面的双数组,使用单数组,先从左向右更新,跟方法一一样,然后从右往左更新,此时当当前评分高于右边时,要判断此时值是否大于右边,如果大于则不用更新
否则更新dp[i] = dp[i + 1] + 1 因为此时已经从左往右更新过了,无法保证未更新前 dp[i] <= dp[i + 1]

*/

class Solution {
    public int candy(int[] ratings) {
        if(ratings.length == 0){
            return 0;
        } 
        int[] dp = new int[ratings.length];
        Arrays.fill(dp, 1);
        int res = 0;
        for(int i = 1; i < ratings.length; i++){
            if(ratings[i] > ratings[i - 1]){
                dp[i] = dp[i - 1] + 1;
            }
        }
        for(int i = ratings.length - 2; i >= 0; i--){
            if(ratings[i] > ratings[i + 1] && dp[i] <= dp[i + 1]){
                dp[i] = dp[i + 1] + 1;
            }
        }
        for(int i = 0; i < ratings.length; i++){
            res += dp[i];
        }
        return res;
    }
}
