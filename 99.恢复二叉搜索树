/*
二叉搜索树中的两个节点被错误地交换。

请在不改变其结构的情况下，恢复这棵树。

示例 1:

输入: [1,3,null,null,2]

   1
  /
 3
  \
   2

输出: [3,1,null,null,2]

   3
  /
 1
  \
   2
示例 2:

输入: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

输出: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
进阶:

使用 O(n) 空间复杂度的解法很容易实现。
你能想出一个只使用常数空间的解决方案吗？

*/

/*
方法一:递归
二叉树首先想到递归
并且交换节点太麻烦,考虑找到节点后直接交换值
二叉搜索树两个节点交换只有以下五种情况:
1.左右子树的两个节点交换, 此时左子树的最大节点大于右子树最小节点. 找出左子树最大节点,右子树最小节点,交换值即可.
2.左子树的某节点与根节点交换,此时根节点小于左子树最大节点. 找出左子树最大节点,与根节点值交换即可.
3.右子树的某节点与根节点交换,此时根节点大于右子树最小节点.  找出右子树最小节点,与根节点值交换.
4.左子树的某两个值交换. 对root.left进行递归操作即可
5.右子树的某两个值交换, 对root.right进行递归操作即可

同时用递归写找最大与最小节点的方法

*/

class Solution {
    public void recoverTree(TreeNode root) {
        if(root == null){
            return;
        }
        TreeNode minRightRoot = getMinRoot(root.right);
        TreeNode maxLeftRoot = getMaxRoot(root.left);
        if(minRightRoot != null && maxLeftRoot != null && minRightRoot.val < maxLeftRoot.val){
            int temp = minRightRoot.val;
            minRightRoot.val = maxLeftRoot.val;
            maxLeftRoot.val = temp;
            return;
        }

        if(minRightRoot != null && minRightRoot.val < root.val){
            int temp = root.val;
            root.val = minRightRoot.val;
            minRightRoot.val = temp;
            return;
        }
        if(maxLeftRoot != null && maxLeftRoot.val > root.val){
            int temp = root.val;
            root.val = maxLeftRoot.val;
            maxLeftRoot.val = temp;
            return;
        }
        recoverTree(root.left);
        recoverTree(root.right);
    }

    private TreeNode getMinRoot(TreeNode root){
        if(root == null){
            return null;
        }
        TreeNode minLeft = getMinRoot(root.left);
        TreeNode minRight = getMinRoot(root.right);
        if(minLeft != null && root.val > minLeft.val){
            root = minLeft;
        }
        if(minRight != null && root.val > minRight.val){
            root = minRight;
        }
        return root;
    }

    private TreeNode getMaxRoot(TreeNode root){
        if(root == null){
            return null;
        }
        TreeNode minLeft = getMaxRoot(root.left);
        TreeNode minRight = getMaxRoot(root.right);
        if(minLeft != null && root.val < minLeft.val){
            root = minLeft;
        }
        if(minRight != null && root.val < minRight.val){
            root = minRight;
        }
        return root;
    }
}


/*
方法二:中序遍历
因为中序遍历得到的节点是顺序的,考虑使用中序遍历
使用pre节点保存前一节点值,与当前节点比较,pre节点值赋值位置为中序遍历原本打印当前节点值时,即
inorderTraversal(root.left);
pre = root; //println(root.val)
inorderTraversal(root.right);

同时交换节点有两种情况:
1.相邻两节点交换: 124356 只存在一对反序节点 此时找到pre.val>root.val时交换值即可
2.不相邻节点交换:164352 此时存在两对反序节点 6 4 与 5 2 此时交换第一对反序节点的第一个节点值与第二对反序节点的后一个节点值即可

使用first维持前反序节点,second维持后反序节点 初始化first和second都为null
当遇到pre.val>root.val时判断first是否为null,为null说明这是第一次碰到,将pre赋给first root赋给second
否则说明第二次碰到,此时将root赋给second即可 此时first为 第一对反序节点前一节点 second为第二对反序节点后节点 交换值即可

中序遍历有三种写法,递归,栈,morris 此处题目进阶要求空间复杂度为O(1),考虑使用morris

*/




/*
递归中序遍历

*/
class Solution {
    TreeNode first = null;
    TreeNode second = null;
    TreeNode pre = null;
    public void recoverTree(TreeNode root) {
        if(root == null){
            return;
        }
        inorderTraversal(root);
        int temp = first.val;
        first.val = second.val;
        second.val = temp;
    }
    private void inorderTraversal(TreeNode root){
        if(root == null){
            return;
        }
        inorderTraversal(root.left);
        if(pre != null && pre.val > root.val){
            if(first == null){
                first = pre;
                second = root;
            }else{
                second = root;
            }
        }
        pre = root;
        inorderTraversal(root.right);
    }
}
