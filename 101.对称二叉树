/*
给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
说明:

如果你可以运用递归和迭代两种方法解决这个问题，会很加分。

*/

/*
方法一：递归
镜像对称，即左右两边的子树，左子树的左子树和右子树的右子树相同，左子树的右子树和右子树的左子树相同
*/

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return isMirror(root,root);
    }
    public boolean isMirror(TreeNode r1,TreeNode r2){
        if(r1==null&&r2==null){
            return true;
        }else if(r1==null&&r2!=null){
            return false;
        }else if(r1!=null&&r2==null){
            return false;
        }else if(r1.val!=r2.val){
            return false;
        }
        return isMirror(r1.left,r2.right)&&isMirror(r1.right,r2.left);
    }
}

/*
方法二：迭代
*/

class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode r1=queue.poll();
            TreeNode r2=queue.poll();
            if(r1==null&&r2==null){
                continue;
            }else if(r1==null||r2==null){
                return false;
            }else if(r1.val!=r2.val){
                return false;
            }
            queue.add(r1.left);
            queue.add(r2.right);
            queue.add(r1.right);
            queue.add(r2.left);
        }
        return true;
    }
}
