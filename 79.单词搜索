/*
给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

*/

/*
方法一：回溯法
因为只用判断是否存在，不用记录具体的单词，所以不需要stack来保存
一定要用boolean result先保存结果，但不能直接return，必须要先把flag回置为false，再return
不然直接return result时，flag[i][j]=false会不可达
*/

class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] flag=new boolean[board.length][board[0].length];
        for(int row=0;row<board.length;row++){
            for(int col=0;col<board[0].length;col++){
                if(backTrack(board,word,0,row,col,flag)){
                        return true;
                }
            }
        }
        return false;
    }
    public boolean backTrack(char[][]board,String word,int k,int i,int j,boolean[][] flag){
        if(k==word.length()){
            return true;
        }
        if(i<0||j<0||i>=board.length||j>=board[0].length||board[i][j]!=word.charAt(k)||flag[i][j]){
            return false;
        }
        flag[i][j]=true;
        boolean result=backTrack(board,word,k+1,i+1,j,flag)||backTrack(board,word,k+1,i-1,j,flag)||backTrack(board,word,k+1,i,j+1,flag)||backTrack(board,word,k+1,i,j-1,flag);
        flag[i][j]=false;
        return result;
    }       
}
