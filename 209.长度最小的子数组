/*
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。

示例: 

输入: s = 7, nums = [2,3,1,2,4,3]
输出: 2
解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。
进阶:

如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。

*/

/*
方法一:暴力法
直接遍历整个数组

*/

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int res = nums.length + 1;
        for(int i = 0; i < nums.length; i++){
            int tmp = 0;
            for(int j = i; j < nums.length; j++){
                tmp += nums[j];
                if(tmp >= s){
                    res = Math.min(res, j + 1 - i);
                    break;
                }
            }
        }
        return res == nums.length + 1 ? 0 : res;
    }
}

/*
方法二:双指针 滑动窗口
维持双指针,当和大于s时,移动左指针直至和小于s,每次都判断长度是否小于之前的最小值,如小于则更新最小值

*/

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int start = 0;
        int res = nums.length + 1;
        int total = 0;
        for(int i = 0; i < nums.length; i++){
            total += nums[i];
            while(total >= s){
                res = Math.min(i + 1 - start, res);
                total -= nums[start];
                start++;
            }
        }
        return res == nums.length + 1 ? 0 : res;
    }
}
