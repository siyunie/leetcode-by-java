/*

找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。

说明：

所有数字都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: k = 3, n = 7
输出: [[1,2,4]]
示例 2:

输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]

*/

/*
方法一:回溯+剪枝
剪枝residual >= candidates[i]放在for(;;)中


*/


class Solution {
    List<List<Integer>> res = new ArrayList<>();
    Stack<Integer> stack = new Stack<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] candidates = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        helper(k, n, 0, candidates);
        return res;
    }

    private void helper(int k, int residual, int index, int[] candidates){
        if(k == 0 && residual == 0){
            res.add(new ArrayList<>(stack));
        }
        if(k == 0 || residual == 0){
            return;
        }
        for(int i = index; i < candidates.length && residual >= candidates[i]; i++){
            stack.push(candidates[i]);
            helper(k - 1, residual - candidates[i], i + 1, candidates);
            stack.pop();
        }
    }
}


/*
方法二:回溯+剪枝
剪枝放在for循环体中if(residual < candidates[i]) break

*/

class Solution {
    List<List<Integer>> res = new ArrayList<>();
    Stack<Integer> stack = new Stack<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] candidates = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        helper(k, n, 0, candidates);
        return res;
    }

    private void helper(int k, int residual, int index, int[] candidates){
        if(k == 0 && residual == 0){
            res.add(new ArrayList<>(stack));
        }
        if(k == 0 || residual == 0){
            return;
        }
        for(int i = index; i < candidates.length; i++){
            if(residual < candidates[i]){
                break;
            }
            stack.push(candidates[i]);
            helper(k - 1, residual - candidates[i], i + 1, candidates);
            stack.pop();
        }
    }
}
