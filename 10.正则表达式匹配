/*
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' *的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
*/

/*
方法一：回溯递归
考虑到如果没有*，结果就非常简单
如果有*，一定有前一个数，并与前一个数组成组合
可以分为两种情况，第一直接忽略这个组合，然后继续匹配s与p.substring(2)。第二前一个数匹配，即firstMatch,然后继续匹配s.substring(1),p
这两种情况满足其中之一就可以
注意需要考虑p与s匹配后为空的情况，如果p为空s必然为空，但是反之不成立，即s为空p不一定为空，因为*可以匹配0个
*/

class Solution {
    public boolean isMatch(String s, String p) {
        if(p.length()==0){
            return s.length()==0;
        }
        boolean firstMatch=(s.length()!=0)&&((s.charAt(0)==p.charAt(0))||(p.charAt(0)=='.'));
        if(p.length()>=2&&p.charAt(1)=='*'){
            return isMatch(s,p.substring(2))||(firstMatch&&isMatch(s.substring(1),p));
        }else{
            return firstMatch&&isMatch(s.substring(1),p.substring(1));
        }
    }
}

/*
方法一时间复杂度过高
考虑用动态规划实现方法二？
*/
