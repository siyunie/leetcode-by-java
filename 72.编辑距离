/*
给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。

你可以对一个单词进行如下三种操作：

插入一个字符
删除一个字符
替换一个字符
示例 1:

输入: word1 = "horse", word2 = "ros"
输出: 3
解释: 
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')
示例 2:

输入: word1 = "intention", word2 = "execution"
输出: 5
解释: 
intention -> inention (删除 't')
inention -> enention (将 'i' 替换为 'e')
enention -> exention (将 'n' 替换为 'x')
exention -> exection (将 'n' 替换为 'c')
exection -> execution (插入 'u')

*/

/*
方法一：动态规划
dp[i][j]表示word1的前i个字符变成word2的前j个字符的最少操作数
当word1[i]==word2[j]时，dp[i][j]=dp[i-1][j-1]，否则dp[i][j]=Math.min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
dp[i-1][j-1]+1代表把word1[i]替换位word2[j]，dp[i-1][j]+1表示word1直接删除第i个数，dp[i][j-1]+1表示word1直接插入word2[j]
dp[0][]等于word1为空，所以变成word2就是不断插入字符，dp[0][j]=dp[0][j-1]+1
dp[][0]等于word2为空，所以变成word2就是不断删除字符，dp[i][0]=dp[i-1][0]+1
*/

class Solution {
    public int minDistance(String word1, String word2) {
        int[][] dp=new int[word1.length()+1][word2.length()+1];
        dp[0][0]=0;
        for(int i=1;i<=word1.length();i++){
            dp[i][0]=dp[i-1][0]+1;
        }
        for(int j=1;j<=word2.length();j++){
            dp[0][j]=dp[0][j-1]+1;
        }
        for(int i=1;i<=word1.length();i++){
            for(int j=1;j<=word2.length();j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.min(Math.min(dp[i-1][j-1],dp[i-1][j]),dp[i][j-1])+1;
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}
