/*
给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

注意:

每个数组中的元素不会超过 100
数组的大小不会超过 200
示例 1:

输入: [1, 5, 11, 5]

输出: true

解释: 数组可以分割成 [1, 5, 5] 和 [11].
 

示例 2:

输入: [1, 2, 3, 5]

输出: false

解释: 数组不能分割成两个元素和相等的子集.

*/

/*
方法一:动态规划 01背包问题
dp[i][j]表示从前i个数中任意取数,每个数只能取1次,和为j
所以对于dp[i][j]只有两种可能:
1. 第i个数不取,则dp[i][j] = dp[i-1][j]
2. 第i个数取,则dp[i][j] = dp[i-1][j-nums[i]] 此情况需满足j - nums[i] >= 0
因为dp[i]与i-1有关,所以对i=0的情况,即此时i-1=-1要单独考虑,i=0即只能取第一个,所以如果nums[0] = j则满足条件,dp[0][j]为true,不然为false
*/

class Solution {
    public boolean canPartition(int[] nums) {
        int total = 0;
        for(int num: nums){
            total += num;
        }
        if(total%2 != 0){
            return false;
        }
        int target = total/2;
        boolean[][] dp = new boolean[nums.length][target + 1];
        for(int j = 1; j < target + 1; j++){
            if(nums[0] == j){
                dp[0][j] = true;
            }
        }

        for(int i = 1; i < nums.length; i++){
            for(int j = 1; j < target + 1; j++){
                if(j >= nums[i]){
                    dp[i][j] = dp[i-1][j] || dp[i - 1][j - nums[i]];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[nums.length - 1][target];
    }
}
