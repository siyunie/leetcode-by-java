/*

给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。

'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。
两个字符串完全匹配才算匹配成功。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "*"
输出: true
解释: '*' 可以匹配任意字符串。
示例 3:

输入:
s = "cb"
p = "?a"
输出: false
解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。
示例 4:

输入:
s = "adceb"
p = "*a*b"
输出: true
解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 "dce".
示例 5:

输入:
s = "acdcb"
p = "a*c?b"
输入: false

*/

/*
方法一:动态规划
dp[i][j]保存s的前i个数和p的前j个数是否匹配
所以最终结果为dp[s.length()][p.length()]
初始化dp[0][0] = true 即空串匹配空串 然后当p.charAt(j - 1) == * 时 dp[0][j] = dp[0][j-1] 因为之后*能匹配空串,只要出现一个不为*的字符,之后就默认为false

动态转移方程
当s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?'时dp[i][j] = dp[i - 1][j - 1]
当p.charAt(j - 1) == '*' 有两种情况:
          第一种*匹配空串dp[i][j] = dp[i][j - 1]
          第二种*匹配s的第i个字符 dp[i][j] = dp[i - 1][j] 注意此时不是dp[i][j] = dp[i - 1][j - 1], 因为*可能匹配多个字符

*/


class Solution {
    public boolean isMatch(String s, String p) {
        int lens = s.length();
        int lenp = p.length();
        boolean[][] dp = new boolean[lens + 1][lenp + 1];
        dp[0][0] = true;
        for(int i = 1; i <= lenp; i++){
            if(p.charAt(i - 1) == '*'){
                dp[0][i] = dp[0][i - 1];
            }
        }
        for(int i = 1; i <= lens; i++){
            for(int j = 1; j <= lenp; j++){
                if(s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?'){
                    dp[i][j] = dp[i - 1][j - 1];
                }else if(p.charAt(j - 1) == '*'){
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
            }
        }
        return dp[lens][lenp];
    }
}
