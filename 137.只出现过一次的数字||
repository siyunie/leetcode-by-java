/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,3,2]
输出: 3
示例 2:

输入: [0,1,0,1,0,1,99]
输出: 99

*/

/*
方法一:位运算
类似于看作三进制不进位运算
跟上一题类似,上一题时二进制不进位运算,用异或来实现,即1^1 = 0 1^0 = 1 0^0 = 0
此处其他数重复三次,因此三进制不进位运算,每位如果是3或是0,说明结果此位是0,如果为4或1说明结果上的此位为1 注意此时遍历一定是遍历完32位的,包括符号位
因为只有一个单独的未重复数,所有别的数是正还是负,所有位包括符号位最后一定会被3取余不影响,而这个单独的数可能为正,可能为负,所以符号位一定要做同样处理
此方法遍历32n次 所以时间复杂度为O(n) 线性时间复杂度,同时未使用额外空间,符合题目要求

*/

class Solution {
    public int singleNumber(int[] nums) {
        int res = 0;
        for(int i = 0; i < 32; i++){
            int tmp = 0;
            for(int j = 0; j < nums.length; j++){
                if(((nums[j] >>> i)&1) == 1){
                    tmp++;
                }
            }
            if(tmp % 3 != 0){
                res = res | (1 << i);
            }
        }
        return res;
    }
}
