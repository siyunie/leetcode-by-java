/*

假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例 1:

输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true
示例 2:

输入: nums = [2,5,6,0,0,1,2], target = 3
输出: false
进阶:

这是 搜索旋转排序数组 的延伸题目，本题中的 nums  可能包含重复元素。
这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？

*/



/*
方法一:二分法变形
因为数字可能重复,如果left数等于mid数时 如 101111时 分不清时前半部分有序还是后半部分有序 直接left++ 排除此数
然后判断mid与left大小,nums[left]<nums[mid]说明前半有序,如果nums[left]=<target<nums[right]时在前半段搜索,否则取后半段
若nums[left]>nums[mid]说明后半有序,同样做上述判断

*/


class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length == 0){
            return false;
        }

        int left = 0, right = nums.length - 1;
        while(left <= right){
            int mid = (left + right) >>> 1;
            if(nums[mid] == target){
                return true;
            }
            if(nums[mid] == nums[left]){
                left++;
                continue;
            }
            if(nums[left] < nums[mid]){
                if(nums[left] <= target && nums[mid] > target){
                    right = mid - 1;
                }else{
                    left = mid + 1;
                }
            }else{
                if(nums[mid] < target && nums[right] >= target){
                    left = mid + 1;
                }else{
                    right = mid - 1;
                }
            }
        }
        return false;
    }
}

//

class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length == 0){
            return false;
        }
        int left = 0;
        int right = nums.length - 1;
        while(left < right){
            int mid = (left + right) >>> 1;
            if(nums[mid] == target){
                return true;
            }
            if(nums[left] == nums[mid]){
                left++;
                continue;
            }
            if(nums[left] < nums[mid]){
                if(nums[mid] > target && target >= nums[left]){
                    right = mid;
                }else{
                    left = mid + 1;
                }
            }else{
                if(nums[mid] < target && target <= nums[right]){
                    left = mid + 1;
                }else{
                    right = mid;
                }
            }
        }
        return nums[left] == target;
    }
}
