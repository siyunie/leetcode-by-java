/*
给出一个完全二叉树，求出该树的节点个数。

说明：

完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。

示例:

输入: 
    1
   / \
  2   3
 / \  /
4  5 6

输出: 6

*/

/*
方法一:前序遍历 递归
同理 中序遍历 后序遍历均可

*/

class Solution {
    int count = 0;
    public int countNodes(TreeNode root) {
        preorder(root);
        return count;
    }

    private void preorder(TreeNode root){
        if(root == null){
            return;
        }
        count++;
        preorder(root.left);
        preorder(root.right);
    }
}

/*
方法二:层序遍历 BFS

*/

class Solution {
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        int count = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode tmp = queue.poll();
            count++;
            if(tmp.left != null){
                queue.offer(tmp.left);
            }
            if(tmp.right != null){
                queue.offer(tmp.right);
            }
        }
        return count;
    }
}


/*
方法三:迭代实现前序遍历

*/

class Solution {
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        int count = 0;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode tmp = stack.pop();
            count++;
            if(tmp.right != null){
                stack.push(tmp.right);
            }
            if(tmp.left != null){
                stack.push(tmp.left);
            }
        }
        return count;
    }
}
