/*
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

*/

/* 
方法一：贪心算法
从右往左遍历，初始化pos=终点，只要当前index+nums[index]>=pos，说明这个点可以到终点，此时把pos更新为这个点坐标
因为后面的点能到这个点则一定能通过这个点到终点，包括后面的点能直接到终点也一定会跨越这个点，则也会满足index+nums[index]>=pos
最后判断pos是否为0，即为初始点
*/

class Solution {
    public boolean canJump(int[] nums) {
        int pos=nums.length-1;
        for(int i=nums.length-2;i>=0;i--){
            if(i+nums[i]>=pos){
                pos=i;
            }
        }
        return pos==0;
    }
}
