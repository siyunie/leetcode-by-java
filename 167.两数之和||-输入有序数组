/*
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
示例:

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

*/

/*
方法一:hashmap 空间换时间
用hashmap保存数组的值和对应的下标,遍历数组,用containskey判断剩下值存不存在,存在即找到了结果,直接返回

*/

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] res = new int[2];
        if(numbers.length == 0){
            return res;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < numbers.length; i++){
           map.put(numbers[i], i + 1);
        }
        int residual = 0;
        for(int i = 0; i < numbers.length; i++){
            residual = target - numbers[i];
            if(map.containsKey(residual)){
                res[0] = i + 1;
                res[1] = map.get(residual);
                return res;
            }
        }
        return res;
    }
}

/*
方法二:双指针
维持头指针尾指针,相加大于target尾指针左移,小于target头指针右移,直至找到结果

*/

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] res= new int[2];
        if(numbers.length == 0){
            return res;
        }
        int left = 0;
        int right = numbers.length - 1;
        while(left < right){
            if(numbers[left] + numbers[right] == target){
                res[0] = left + 1;
                res[1] = right + 1;
                return res;
            }else if(numbers[left] + numbers[right] > target){
                right--;
            }else{
                left++;
            }
        }
        return res;
    }
}
