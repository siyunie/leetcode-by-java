/*
使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。
示例:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false
说明:

你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。
你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。
假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。

*/

/*
方法一:两个栈
每次往栈Apush值时,直接放入栈底部,通过将A的所有元素依次pop()进栈B,放入新元素之后再依次push()回栈A即可

*/

class MyQueue {
    Stack<Integer> stackA;
    Stack<Integer> stackB;
    /** Initialize your data structure here. */
    public MyQueue() {
        stackA = new Stack<>();
        stackB = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        while(!stackA.isEmpty()){
            stackB.push(stackA.pop());
        }
        stackB.push(x);
        while(!stackB.isEmpty()){
            stackA.push(stackB.pop());
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        return stackA.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        return stackA.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stackA.isEmpty();
    }
}


/*
方法二:两个栈
维持一个front,当A栈为空时,push新元素时将其置为新元素的值
每次pop时,如果B为空,则把A所有元素push进B,如果不为空,直接pop()B 这样只要不是最坏情况,push和pop以及peek时间复杂度均为O(1)
peek时检查B是否为空,不为空则peek()B,为空则返回front的值

*/

class MyQueue {
    Stack<Integer> stackA;
    Stack<Integer> stackB;
    int front;
    /** Initialize your data structure here. */
    public MyQueue() {
        stackA = new Stack<>();
        stackB = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(stackA.isEmpty()){
            front = x;
        }
        stackA.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(stackB.isEmpty()){
            while(!stackA.isEmpty()){
                stackB.push(stackA.pop());
            }
        }
        return stackB.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(!stackB.isEmpty()){
            return stackB.peek();
        }
        return front;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stackA.isEmpty() && stackB.isEmpty();
    }
}
