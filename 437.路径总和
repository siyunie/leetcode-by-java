/*
给定一个二叉树，它的每个结点都存放着一个整数值。

找出路径和等于给定数值的路径总数。

路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。

二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。

示例：

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

返回 3。和等于 8 的路径有:

1.  5 -> 3
2.  5 -> 2 -> 1
3.  -3 -> 11

*/

/*方法一:前序遍历+递归
可以将题目看成是以根节点为起点,不需要再叶子节点结束的和满足sum的路径,然后递归前序遍历根节点的左右子节点就行
注意当root.val == sum时结果加一,但是不能直接return,因为节点值可以为负数,因此可能此路径继续走下去还能满足条件,即后面的节点值相加为0
helper方法表示一定包含root节点的路径
*/

class Solution {
    int res = 0;
    public int pathSum(TreeNode root, int sum) {
        if(root == null){
            return 0;
        }
        helper(root, sum);
        pathSum(root.left, sum);
        pathSum(root.right, sum);
        return res;
    }
    
    private void helper(TreeNode root, int sum){
        if(root == null){
            return;
        }
        if(root.val == sum){
            res++;
        }
        helper(root.left, sum - root.val);
        helper(root.right, sum - root.val);
        return;
    }
}
