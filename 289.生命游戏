/*
根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例:

输入: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶:

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？

*/

/*
方法一:原地算法
遍历两次,原地更新数组的值,第一次更新判断最后更新成什么状态,第二次更新成最终值
第一次遍历时有下列四种情况:  1 变 0 记为 3 
                           0 变 1 记为 2
                           1保持不变
                           0保持不变
                
判断每个细胞周围有几个活细胞的helper方法时,注意边界问题,左右上下边界都要判断是否超出了数组的范围,用Math.max和Math.min避免超出边界

同时注意 此处判断周围有几个活细胞时,遍历了周围所有细胞,包括自己也被判断了一遍,因此当自己本来为活细胞,即为1时,也算进周围活细胞数目里的
所以统计完之后,如果自处原值为1,需要count-- 得到正确的周围活细胞数量再进行判断然后赋值

*/

class Solution {
    public void gameOfLife(int[][] board) {
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                helper(board, i, j);
            }
        }
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == 3){
                    board[i][j] = 0;
                }
                if(board[i][j] == 2){
                    board[i][j] = 1;
                }
            }
        }
    }
    
    private void helper(int[][] board, int i, int j){
        int count = 0;
        int left = Math.max(j - 1, 0);
        int right = Math.min(j + 1, board[0].length - 1);
        int top = Math.max(i - 1, 0);
        int bottom = Math.min(i + 1, board.length - 1);
        for(int x = top; x <= bottom; x++){
            for(int y = left; y <= right; y++){
                if(board[x][y] == 1 || board[x][y] == 3){
                    count++;
                }
            }
        }
        if(board[i][j] == 1){
            count--;
            if(count != 2 && count != 3){
                board[i][j] = 3;
            }
        }else{
            if(count == 3){
                board[i][j] = 2;
            }
        }
    }
}
