/*
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 感谢 Marcos 贡献此图。

示例:

输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

*/

/*
方法一：暴力破解，对每根柱子，遍历左边右边，分别找出最高值，取这两个值小的那个，与本柱子的高度差就是这跟柱子的储水值
*/

class Solution {
    public int trap(int[] height) {
        int ans=0;
        for(int i=1;i<height.length-1;i++){
            int maxLeft=0;
            int maxRight=0;
            for(int j=i;j<height.length;j++){//一定要从i开始，这样保证如果右边都比此根柱子矮，maxRight=heigh[i]，保证temp不会为负值
                maxRight=Math.max(height[j],maxRight);
            }
            for(int k=i;k>=0;k--){//一定要从i开始，这样保证如果左边都比此根柱子矮，maxLeft=heigh[i]，保证temp不会为负值
                maxLeft=Math.max(height[k],maxLeft);
            }
            int min=Math.min(maxRight,maxLeft);
            int temp=min-height[i];
            ans+=temp;
        }
        return ans;
    }
}

/*
方法二：动态规划
用maxLeft数组保存第i根左边的最大值，用maxRight数组保存第i根右边的最大值，这样保存了中间量，时间复杂度从O(n2)降为O(n)
*/

class Solution {
    public int trap(int[] height) {
        if(height.length<1){
            return 0;
        }
        int ans=0;
        int[] maxLeft=new int[height.length];
        int[] maxRight=new int[height.length];
        maxLeft[0]=height[0];
        maxRight[height.length-1]=height[height.length-1];
        for(int i=1;i<height.length;i++){
            maxLeft[i]=Math.max(height[i],maxLeft[i-1]);
        }
        for(int i=height.length-2;i>=0;i--){
            maxRight[i]=Math.max(height[i],maxRight[i+1]);
        }
        for(int i=1;i<height.length-1;i++){
            int temp=Math.min(maxLeft[i],maxRight[i])-height[i];
            ans+=temp;
        }
        return ans;
    }
}
