/*
给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

返回被除数 dividend 除以除数 divisor 得到的商。

示例 1:

输入: dividend = 10, divisor = 3
输出: 3
示例 2:

输入: dividend = 7, divisor = -3
输出: -2
说明:

被除数和除数均为 32 位有符号整数。
除数不为 0。
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。

*/

/*
方法一:位运算
先判断特殊情况,即-2^31/-1时,直接返回2^31 - 1
然后对其他情况,因为要准换成整数来做,如果除数或者被除数位-2^31转成正数会溢出,因此用long型来保存
然后通过位运算来算结果

*/

class Solution {
    public int divide(int dividend, int divisor) {
        if(dividend == 0){
            return 0;
        }
        if(dividend == Integer.MIN_VALUE && divisor == -1){
            return Integer.MAX_VALUE;
        }
        boolean flag = (divisor ^ dividend) < 0;
        int count = 0;
        long a = dividend > 0 ? (long)dividend : -(long)dividend; 
        long b = divisor > 0 ? (long)divisor : -(long)divisor; 
        for(int i = 31; i >= 0; i--){
            if(a >>> i >= b){
                a -= b << i;
                count += 1 << i; 
            }
        }
        return flag ? -count : count;
    }
}
