/*
设计并实现一个 TwoSum 的类，使该类需要支持 add 和 find 的操作。

add 操作 -  对内部数据结构增加一个数。
find 操作 - 寻找内部数据结构中是否存在一对整数，使得两数之和与给定的数相等。

示例 1:

add(1); add(3); add(5);
find(4) -> true
find(7) -> false
示例 2:

add(3); add(1); add(2);
find(3) -> true
find(6) -> false

*/

/*
方法一:arraylist顺序插入+双指针
把数存在arraylist中
add时顺序插入
find时使用双指针,头指针右移,尾指针左移直至找到value返回true,重合还未找到则返回false

*/

class TwoSum {
    List<Integer> list;
    /** Initialize your data structure here. */
    public TwoSum() {
        list = new ArrayList<>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        if(list.size() == 0){
            list.add(number);
        }else{
            for(int i = 0; i < list.size(); i++){
                if(number < list.get(i)){
                    list.add(i,number);
                    return;
                }
            }
            list.add(number);
        }
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        if(list.size() < 2){
            return false;
        }
        int left = 0;
        int right = list.size() - 1;
        while(left < right){
            if(list.get(left) + list.get(right) == value){
                return true;
            }else if(list.get(left) + list.get(right) > value){
                right--;
            }else{
                left++;
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */
 
 
 
 /*
 方法二:方法一变形
 add时使用二分法查插入位置,让add操作时间复杂度从O(n)减到O(log(n))
 
 */
 
 class TwoSum {
    List<Integer> list;
    /** Initialize your data structure here. */
    public TwoSum() {
        list = new ArrayList<>();
    }
    
    /** Add the number to an internal data structure.. */
    public void add(int number) {
        int left = 0;
        int right = list.size() - 1;
        while(left <= right){
            int mid = (left + right) >>> 1;
            if(list.get(mid) > number){
                right = mid - 1;
            }else if(list.get(mid) < number){
                left = mid + 1;
            }else{
                left = mid;
                break;
            }
        }
        list.add(left, number);
    }
    
    /** Find if there exists any pair of numbers which sum is equal to the value. */
    public boolean find(int value) {
        if(list.size() < 2){
            return false;
        }
        int left = 0;
        int right = list.size() - 1;
        while(left < right){
            if(list.get(left) + list.get(right) == value){
                return true;
            }else if(list.get(left) + list.get(right) > value){
                right--;
            }else{
                left++;
            }
        }
        return false;
    }
}

/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */
