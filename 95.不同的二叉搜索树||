/*

给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
*/

/*
方法一:递归
要求返回List<TreeNode> 即返回 每棵可能的二叉搜索树的头节点组成的list
对二叉树问题考虑用递归
1到n个数, 满足二叉搜索树性质,左子树的所有节点小于头节点,右子树的所有节点大于头节点

取1为头节点,则左子树只可能为null,右子树为2-n的所有可能的二叉搜索树
取2为头节点,则左子树为1,右子树为3-n的所有可能的二叉搜索树
...
...
...
取n为头节点,则左子树为1-n-1的所有可能的二叉搜索树,右子树为null

对于上面的所有可能中的左右子树,可以递归得到所有可能,如第一种,右子树为2-n的所有可能的二叉搜索树,就变为了子问题 从2到n个数的二叉搜索树 的问题
即把2-n个数依次作为根节点,然后求所有可能的二叉搜索树
最后将所有的左右子树与根节点拼接起来就可以得到最终解

*/


class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n == 0){
            return new ArrayList<TreeNode>();
        }
        return helper(1, n);
    }

    public List<TreeNode> helper(int start, int end){
        List<TreeNode> res = new ArrayList<>();
        if(start > end){
            res.add(null);
            return res;
        }
        if(start == end){
            res.add(new TreeNode(start));
            return res;
        }
        for(int i = start; i <= end; i++){
            List<TreeNode> lefts = helper(start, i - 1);
            List<TreeNode> rights = helper(i + 1, end);
            for(TreeNode left: lefts){
                for(TreeNode right: rights){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    res.add(root);
                }
            }
        }
        return res;
    }
}
