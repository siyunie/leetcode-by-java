/*
给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。

*/

/*
方法一：
对于所有数，分奇数偶数
奇数的1个数 等于之前的偶数+1，多的1就是奇数最后一位的1
偶数的1个数 等于偶数/2的数的1个数，因为/2等于右移一位，偶数最后一位为0，位移后1个数不变
*/

class Solution {
    public int[] countBits(int num) {
        if(num == 0){
            return new int[1];
        }
        int[] dp = new int[num + 1];
        for(int i = 1; i <= num; i++){
            if(i%2 == 0){   //或if((i&1) == 0) 注意要加括号 位与优先级低于==
                dp[i] = dp[i/2];
            }else{
                dp[i] = dp[i-1] + 1;
            }
        }
        return dp;
    }
}
