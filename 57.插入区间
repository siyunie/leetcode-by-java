/*
给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

示例 1:

输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
输出: [[1,5],[6,9]]
示例 2:

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。

*/

/*
方法一:直接顺序遍历数组
依次放入直到下一个区间的左边界大于等于newInterval的左边界,即此时newInterval一定在这个区间左边(或与其合成一个新区间)
然后判断前一个放入区间的右边界和newInterval的左边界是否右重合(因为前一个区间的左边界一定小于newInterval的左边界,所以不可能newInterval整个包括前一个区间的可能)
如果有重合部分,则合并,并且对之后每个区间都判断新插入区间的左边界和上一个放入的右边界是否重合,重合则合并

*/

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        LinkedList<int[]> list = new LinkedList<>();
        int i = 0;
        while(i < intervals.length && newInterval[0] > intervals[i][0]){
            list.offerLast(intervals[i]);
            i++;
        }
        if(list.size() == 0 || list.peekLast()[1] < newInterval[0]){
            list.offerLast(newInterval);
        }else{
            int[] tmpArr = list.pollLast();
            tmpArr[1] = Math.max(newInterval[1], tmpArr[1]);
            list.offerLast(tmpArr);
        }
        while(i < intervals.length){
            if(intervals[i][0] > list.peekLast()[1]){
                list.offerLast(intervals[i]);
                i++;
            }else{
                int[] tmpArr = list.pollLast();
                tmpArr[1] = Math.max(intervals[i][1], tmpArr[1]);
                list.offerLast(tmpArr);
                i++;
            }
        }
        return list.toArray(new int[list.size()][2]);
    }
}
