/*
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]
注意：

结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？

*/

/*
方法一:HashMap
先不考虑用常数空间复杂度来实现,使用HashMap,第一遍遍历nums数组,存所有值到HashMap中
第二遍遍历HashMap找出值为1,即仅出现一次的数

*/

class Solution {
    public int[] singleNumber(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int num: nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int[] res = new int[2];
        int i = 0;
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            if(entry.getValue() == 1){
                res[i] = entry.getKey();
                i++;
            }
        }
        return res;
    }
}

/*
方法二:位运算
先将所有数做异或运算,得到的就是那两个只出现一次的数的异或值tmp
当一个数 num & (-num) 会得到除num最右边一位1为1其他位全为0的值
因此对总的异或结果tmp做这种运算tmp = tmp & (-tmp) 得到的就是这两个只出现一次的数的从右边开始的第一个不同的值
因此用这个值分别对nums数组内所有数求与,判断结果是否为0,就可以将数组的数分为两部分,一部分为此位为1的所有数,另一部分为此位为0的所有数
因此题目就变成,有两个数组,每个数组内均有一个数只出现一次,另外的数出现两次,求这两个数组中只出现一次的数
因此直接对这两部分数分别做异或得到的两个值就是这两个只出现一次的数

*/

class Solution {
    public int[] singleNumber(int[] nums) {
        int[] res = new int[2];
        int tmp = 0;
        for(int num: nums){
            tmp ^= num;
        }
        tmp = tmp & (-tmp);
        for(int num: nums){
            if((tmp & num) == 0){
                res[0] ^= num;
            }else{
                res[1] ^= num;
            }
        }
        return res;
    }
}
