/*
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

*/

/*
方法一：要求时间复杂度O(log n)，因此考虑二分法
将数组二分，其中有一个一定升序，另一个可能有序，可能部分有序，此时通过中间值和头尾比较判断哪部分有序
如果target在这个有序升序数组内，对这部分继续二分，反之对另一部分二分
*/

class Solution {
    public int search(int[] nums, int target) {
        return findresult(nums,0,nums.length-1,target);
    }
    public int findresult(int[] nums,int low,int high,int target){
        if(low>high){
            return -1;
        }
        int mid=(low+high)/2;
        if(nums[mid]==target){
            return mid;
        }else if(nums[mid]<nums[low]){
            if(target>nums[mid]&&target<=nums[high]){
                return findresult(nums,mid+1,high,target);
            }else{
                return findresult(nums,low,mid-1,target);
            }
        }else{
            if(target>=nums[low]&&target<nums[mid]){
                return findresult(nums,low,mid-1,target);
            }else{
                return findresult(nums,mid+1,high,target);
            }
        } 
    }
}


/*
对方法一发散，如果知道target在有序那一部分，直接调用原始二分法，但是不知为何会超出时间限制？
貌似此时时间复杂度为算法复杂度为O(logn*logn)，log(n/2)+log(n/4)+log(n/8)+..+log(n/n)？不知如何得到的
*/

class Solution {
    public int search(int[] nums, int target) {
        return findresult(nums,0,nums.length-1,target);
    }
    public int findresult(int[] nums,int low,int high,int target){
        if(low>high){
            return -1;
        }
        int mid=(low+high)/2;
        if(nums[mid]==target){
            return mid;
        }else if(nums[mid]<nums[low]){
            if(target>nums[mid]&&target<=nums[high]){
                return binarySearch(nums,mid+1,high,target);
            }else{
                return findresult(nums,low,mid-1,target);
            }
        }else{
            if(target>=nums[low]&&target<nums[mid]){
                return binarySearch(nums,low,mid-1,target);
            }else{
                return findresult(nums,mid+1,high,target);
            }
        } 
    }
    public int binarySearch(int nums[],int low,int high,int target){
        int mid=(low+high)/2;
        while(low<=high){
            if(target>nums[mid]){
                low=mid+1;
            }else if(target<nums[mid]){
                high=mid-1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}


/*
方法三:直接标准二分法

*/

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0){
            return -1;
        }
        int left = 0;
        int right = nums.length - 1;
        while(left < right){
            int mid = (left + right) >>> 1;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] >= nums[left]){
                if(target >= nums[left] && target < nums[mid]){
                    right = mid;
                }else{
                    left = mid + 1;
                }
            }else{
                if(target > nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }else{
                    right = mid;
                }
            }
        }
        return nums[left] == target ? left : -1;
    }
}
