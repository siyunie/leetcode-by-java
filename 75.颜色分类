/*
给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:

输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]
进阶：

一个直观的解决方案是使用计数排序的两趟扫描算法。
首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
你能想出一个仅使用常数空间的一趟扫描算法吗？

*/

/*
方法一：维持三个指针，p0指向0的右边界，cur指向当前数，p2指向2的左边界
当cur==0时，与左边界交换数，并且cur++,p0++. 注意此时一定cur++，因为cur左边的数已经被判断过了，所以不用在交换
比如[0,1,2]，当第一步0与0交换，如果cur不变，cur=0,p0=1，会导致0和1再次交换[1,0,2]导致错误
当cur==1时，cur++
当cur==2时，cur的数与p2的数交换，p2--，注意此时一定不能cur++，因为从右边换过来的数没有判断过，不知道位0 or 1 or 2 需要再判断一遍
*/

class Solution {
    public void sortColors(int[] nums) {
        int p0=0;
        int p2=nums.length-1;
        int cur=0;
        while(cur<=p2){
            if(nums[cur]==0){
                int temp=nums[cur];
                nums[cur]=nums[p0];
                nums[p0]=temp;
                p0++;
                cur++;
            }else if(nums[cur]==1){
                cur++;
            }else if(nums[cur]==2){
                int temp=nums[p2];
                nums[p2]=nums[cur];
                nums[cur]=temp;
                p2--; 
            }
        }
    }
}

/*
方法二:快排

*/

class Solution {
    public void sortColors(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
    }

    private void quickSort(int[] nums, int left, int right){
        if(left >= right){
            return;
        }
        int pivot = nums[left];
        int low = left;
        int high = right;
        while(low < high){
            while(low < high && nums[high] >= pivot){
                high--;
            }
            nums[low] = nums[high];
            while(low < high && nums[low] <= pivot){
                low++;
            }
            nums[high] = nums[low];
        }
        nums[low] = pivot;
        quickSort(nums, left, low - 1);
        quickSort(nums, low + 1, right);
    }
}
