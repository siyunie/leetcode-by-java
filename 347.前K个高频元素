/*
给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。

*/

/*
方法一：最小堆
注意求最大k时用最小堆，时间复杂度位nlogk，如果用最大堆，时间复杂度为nlogn并且还会浪费内存，海量数据会超时
同理求最小k时用最大堆
*/

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int num:nums){
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>((n1, n2)->map.get(n1) - map.get(n2));
        for(Integer key:map.keySet()){
            queue.add(key);
            if(queue.size() > k){
                queue.poll();
            }
        }
        List<Integer> list = new LinkedList<>();
        while(!queue.isEmpty()){
            list.add(queue.poll());
        }
        Collections.reverse(list);
        return list;
    }
}
