/*
给定一个二叉树，返回它的中序 遍历。

示例:

输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]
进阶: 递归算法很简单，你可以通过迭代算法完成吗？
*/

/*
方法一：递归
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        find(root,list);
        return list;
    }
    public void find(TreeNode root,List<Integer> list){
        if(root!=null){
            if(root.left!=null){
                find(root.left,list);
            }
            list.add(root.val);
            if(root.right!=null){
                find(root.right,list);
            }
        }
    }
}

//

class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        inOrder(root);
        return list;
    }
    public void inOrder(TreeNode root){
        if(root == null){
            return;
        }
        inOrder(root.left);
        list.add(root.val);
        inOrder(root.right);
    }
}

/*
方法二：栈
*/

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        Stack<TreeNode> stack=new Stack<>();
        while(root!=null||!stack.isEmpty()){
            while(root!=null){
                stack.push(root);
                root=root.left;
            }
            root=stack.pop();
            list.add(root.val);
            root=root.right;
        }
        return list;
    }
}

/*
方法三:莫里斯遍历
展开成链表,思想就是不断的把当前节点接到左子树的最右节点的右边
如果root无左子树,就把当前节点root添加进结果集,然后进入右子树 root = root.right
如果有左子树,就找到左子树的最右节点, 就把最右节点的右节点指向root,同时保存root的左节点作为next
然后断开root和左子树的连接,即把root.left = null,然后root = next
即进入原来的左子树

*/

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root == null){
            return new ArrayList<Integer>();
        }
        List<Integer> list = new ArrayList<Integer>();
        while(root != null){
            if(root.left == null){
                list.add(root.val);
                root = root.right;
            }else{
                TreeNode leftRight = root.left;
                TreeNode next = leftRight;
                while(leftRight.right != null){
                    leftRight = leftRight.right;
                }
                leftRight.right = root;
                root.left = null;
                root = next;
            }
        }
        return list;
    }
}
