/*

给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。

示例 1:

输入: num1 = "2", num2 = "3"
输出: "6"
示例 2:

输入: num1 = "123", num2 = "456"
输出: "56088"
说明：

num1 和 num2 的长度小于110。
num1 和 num2 只包含数字 0-9。
num1 和 num2 均不以零开头，除非是数字 0 本身。
不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。

*/

/*
方法一:
num1长度位m,num2长度为n,那么结果的长度一定不会超过m+n
所以使用value数组保存结果,最后处理前面多出的0即可

遍历,将num1[i]*num2[j]的结果保存在value[i+j+1]中
再遍历一遍,将value中大于等于10的数进位处理

最后计算value最前面多出来的0,然后将char数组value转化成String即可

*/


class Solution {
    public String multiply(String num1, String num2) {
        if(num1.equals("0") || num2.equals("0")){
            return new String("0");
        }
        char[] value = new char[num1.length() + num2.length()];
        for(int i = num1.length() - 1; i >= 0; i--){
            for(int j = num2.length() - 1; j >= 0; j--){
                value[i + j + 1] += (num1.charAt(i) - '0')*(num2.charAt(j) - '0');
            }
        }
        int temp = 0;
        for(int i = value.length - 1; i>= 0; i--){
            value[i] += temp;
            temp = value[i]/10;
            value[i] %= 10;
        }
        int index = 0;
        while(index < value.length && value[index] == 0){
            index++;
        }
        for(int i = index; i < value.length; i++){
            value[i] += '0';
        }
        return new String(value, index, value.length - index);
    }
}
