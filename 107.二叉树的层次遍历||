/*

给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

*/

/*
方法一:递归
注意此题要自底向上返回,所以当res.size() == level时增加新的arraylist要在res的头部增加,即res.add(0, new ArrayList<Integer>())
并且每次插入index为res.size() - 1 - level
这样才能保证自底向上返回

*/


class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        if(root == null){
            return res;
        }
        helper(root, 0);
        return res;
    }
    public void helper(TreeNode root, int level){
        if(root == null){
            return;
        }
        if(res.size() == level){
            res.add(0, new ArrayList<Integer>());
        }
        res.get(res.size() - 1 - level).add(root.val);
        helper(root.left, level + 1);
        helper(root.right, level + 1);
    }
}

/*
方法二:迭代
此方法关键是每次从res的头部插入 即res.add(0, list) 这样保证自底向上返回

*/

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int size = queue.size();
            for(int i = 0; i< size; i++){
                TreeNode tmp = queue.poll();
                list.add(tmp.val);
                if(tmp.left != null){
                    queue.add(tmp.left);
                }
                if(tmp.right != null){
                    queue.add(tmp.right);
                }
            }
            res.add(0, list);
        }
        return res;
    }
}
