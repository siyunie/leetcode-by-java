/*
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

*/

/*
方法一:递归
简单递归即可

*/

class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null){
            return false;
        }
        if(sum == root.val && root.left == null && root.right == null){
            return true;
        }
        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}

/*
方法二:
简单迭代
维持两个stack来保存值与节点

*/

class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null){
            return false;
        }
        Stack<TreeNode> nodeStack = new Stack<>();
        Stack<Integer> sumStack = new Stack<>();
        nodeStack.push(root);
        sumStack.push(root.val);
        while(!nodeStack.isEmpty()){
            TreeNode node = nodeStack.pop();
            int tmpSum = sumStack.pop();
            if(tmpSum == sum && node.left == null && node.right == null){
                return true;
            }
            if(node.left != null){
                nodeStack.push(node.left);
                sumStack.push(tmpSum + node.left.val);
            }
            if(node.right != null){
                nodeStack.push(node.right);
                sumStack.push(tmpSum + node.right.val);
            }
        }
        return false;
    }
}
