/*

给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

 

示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。
示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]

*/

/*
方法一:HashMap
注意子串的长度都相等
考虑到words中的字符串可能有多种组合顺序,且含有的字符串越多,组合情况越多,所以考虑使用hashmap,这样就避免考虑纠结子串组合顺序
先建立allwords hashmap 把所有子串放入并用value记录出现子串出现次数
当s有子串在hashmap里时,建立另一个Hashmap,同时维持一个放入个数temp, 将s之后的字符按子串长度依次放入,如果依次放入的子串有不属于allwords hashmap的直接break
如新hashmap子串对应的key有大于allwords的,说明重复出现子串过多,从此处开始的字符不能由words组成, break
当temp与words的长度相等时,说明满足要求,将开始下标加入结果中

*/

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res = new ArrayList<>();
        if(words.length == 0 || s.length() == 0){
            return res;
        }

        int nums = words.length;
        int len = words[0].length();

        HashMap<String, Integer> allwords = new HashMap<>();
        for(String word: words){
            allwords.put(word, allwords.getOrDefault(word, 0) + 1);
        }

        for(int i = 0; i < s.length() - nums*len + 1; i++){
            if(allwords.containsKey(s.substring(i, i + len))){
                HashMap<String, Integer> hasWords = new HashMap<>();
                hasWords.put(s.substring(i, i + len), 1);
                int temp = 1;
                while(temp < nums){
                    String word = s.substring(i + temp*len, i + (temp + 1)*len);
                    if(allwords.containsKey(word)){
                        hasWords.put(word, hasWords.getOrDefault(word, 0) + 1);
                        if(hasWords.get(word) > allwords.get(word)){
                            break;
                        }
                        temp++;
                    }else{
                        break;
                    }
                }
                if(temp == nums){
                    res.add(i);
                }
            }
        }
        return res;
    }
}

/*
方法二:滑动窗口
遍历时,只循环words数组里单个字符串那么长 即 for(int i = 0; i < len; i++) 因为字符串长度都相等,这样就可以遍历全部可能
在循环体内维持滑动窗口,先找到第一个符合要求的字符,然后不断判断之后是否不符合要求,即tmpMap.get(tmp) > map.get(tmp)
如果成立,移动左窗口, 每次移动单个字符串的长度, 直到tmpMap.get(tmp) > map.get(tmp)不满足, 不满足则移动右窗口,同样每次移动单个字符串的长度 
维持一个count变量,当count == words长度时,加入左窗口坐标到结果集中

*/

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> list = new ArrayList<>();
        if(words.length == 0 || s.length() == 0){
            return list;
        }
        Map<String, Integer> map = new HashMap<>();
        for(String word: words){
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        int num = words.length;
        int len = words[0].length();
        for(int i = 0; i < len; i++){
            int left = i;
            int right = i;
            int count = 0;
            Map<String, Integer> tmpMap = new HashMap<>();
            while(right + len <= s.length()){
                String tmp = s.substring(right, right + len);
                right += len;
                if(!map.containsKey(tmp)){
                    count = 0;
                    left = right;
                    tmpMap.clear();
                }else{
                    tmpMap.put(tmp, tmpMap.getOrDefault(tmp, 0) + 1);
                    count++;
                    while(tmpMap.get(tmp) > map.get(tmp)){
                        String tmpS = s.substring(left, left + len);
                        tmpMap.put(tmpS, tmpMap.get(tmpS) - 1);
                        count--;
                        left += len;
                    }
                    if(count == num){
                        list.add(left);
                    }
                }
            }
        }
        return list;
    }
}
