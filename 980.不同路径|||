/*

在二维网格 grid 上，有 4 种类型的方格：

1 表示起始方格。且只有一个起始方格。
2 表示结束方格，且只有一个结束方格。
0 表示我们可以走过的空方格。
-1 表示我们无法跨越的障碍。
返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目，每一个无障碍方格都要通过一次。

 

示例 1：

输入：[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
输出：2
解释：我们有以下两条路径：
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
示例 2：

输入：[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
输出：4
解释：我们有以下四条路径： 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
示例 3：

输入：[[0,1],[2,0]]
输出：0
解释：
没有一条路能完全穿过每一个空的方格一次。
请注意，起始和结束方格可以位于网格中的任意位置。
 

提示：

1 <= grid.length * grid[0].length <= 20

*/


/*
方法一:回溯法
为了避免每次到终点时要判断是否走过了全部的可经过点,在第一次遍历找起点时,同时也用count记录0和起点的总个数 
当count == 0 说明所有点已经走过
注意count为起点+0的个数,如果没算起点的个数1,结果错误

回溯法,每次回溯时维持一个temp值保存本次回溯的结果,即以后向上,向下,向左,向右的结果之和

注意此时置grid[i][j] = -1 回溯结束后重置回0  不用考虑点本身是1的情况,即起点,因为一定是从起点出发,且起点只有一个
所以回溯重置起点值为0只会发生在所有的temp计算完毕后得到最终结果时,即整个回溯方法的最后一步,此时将起点值赋值为0不会对结果有任何影响

*/


class Solution {
    public int uniquePathsIII(int[][] grid) {
        int count = 1;
        int startRow = 0, startCol = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 0){
                    count++;
                }else if(grid[i][j] == 1){
                    startRow = i;
                    startCol = j;
                }
            }
        }
        return traceback(grid, startRow, startCol, count);
    }
    public int traceback(int[][] grid, int i, int j, int count){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == -1){
            return 0;
        }

        if(grid[i][j] == 2){
            return count == 0 ? 1 : 0;
        }
        int temp = 0;
        grid[i][j] = -1;
        temp = traceback(grid, i + 1, j, count - 1) + traceback(grid, i - 1, j, count - 1) + traceback(grid, i, j + 1, count - 1) + traceback(grid, i, j - 1, count - 1);
        grid[i][j] = 0;
        return temp;
    }
}
