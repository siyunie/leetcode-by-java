/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

*/

/*
方法一:直接操作链表
直接将链表每位相加,并判断是否有进位,有进位则将进位加到下一位

*/

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int res = 0;
        int residual = 0;
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        while(l1 != null || l2 != null){
            int t1 = l1 == null ? 0 : l1.val;
            int t2 = l2 == null ? 0 : l2.val;
            ListNode tmp = new ListNode((t1 + t2 + residual)%10);
            head.next = tmp;
            head = head.next;
            residual = (t1 + t2 + residual)/10;
            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;
        }
        if(residual != 0){
            ListNode tmp = new ListNode(residual);
            head.next = tmp;
        }
        return dummy.next;
    }
}
