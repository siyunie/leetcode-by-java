/*
中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。

例如，

[2,3,4] 的中位数是 3

[2,3] 的中位数是 (2 + 3) / 2 = 2.5

设计一个支持以下两种操作的数据结构：

void addNum(int num) - 从数据流中添加一个整数到数据结构中。
double findMedian() - 返回目前所有元素的中位数。
示例：

addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
进阶:

如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？
如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？

*/

/*
方法一:ArrayList+排序
最简单办法直接使用ArrayList存数,每次插入新元素时,直接调用Collections.sort()排序

*/

class MedianFinder {
    List<Integer> list;
    /** initialize your data structure here. */
    public MedianFinder() {
        list = new ArrayList<>();
    }
    
    public void addNum(int num) {
        list.add(num);
        Collections.sort(list);
    }
    
    public double findMedian() {
        int size = list.size();
        if(size % 2 == 0){
            double left = list.get(size/2 - 1);
            double right = list.get(size/2);
            return (left + right)/2;
        }else{
            return (double)list.get(size/2);
        }
    }
}

/*
方法二:大顶堆+小顶堆
因为我们只关心中位数,而不关心是否所有数都有序
所以假设所有数升序排序,将前半部分放入大顶堆,后半部分放入小顶堆, 当总数为奇数,中位数为大顶堆的堆顶元素,当总数为偶数,中位数为大顶堆和小顶堆的堆顶元素的平均
所以现在问题就是如何放置元素,其实我们只需要保证大顶堆的所有数都小于等于小顶堆的所有数即可,即大顶堆的堆顶元素小于等于小顶堆的堆顶元素
并保证总数为奇数时,大顶堆元素个数为小顶堆元素个数+1,因为此时需要得到大顶堆的堆顶元素作为中位数 总数为偶数时,大小顶堆元素个数相同

即需要满足以下要求   1.总数为奇数时,大顶堆元素比小顶堆多一,总数为偶数时,大小顶堆元素个数相同
                    2.大顶堆的堆顶元素小于等于小顶堆的堆顶元素

为了满足要求,每次放入元素时可以做如下操作:
此时分两种情况, 1. 此时数据总数为偶数,再放入下一个数,此时将数先放入大顶堆,然后将大顶堆的堆顶元素放入小顶堆,这样保证了大顶堆的所有数都小于小顶堆的所有数
                  此时总数个数为奇数,因为奇数时需要保证大顶堆个数为小顶堆个数+1,所以此时再将小顶堆堆顶元素放入大顶堆即可
               2. 此时数据总数为奇数,再放入下一个数,做同上操作,将数先放入大顶堆,然后将大顶堆的堆顶元素放入小顶堆,此时大顶堆个数不变,小顶堆个数+1
                  因为奇数时小顶堆本来就比大顶堆小一,此时放入数后,总数变为偶数同时大小顶堆元素个数相同,满足要求

*/

class MedianFinder {
    int count;
    PriorityQueue<Integer> minHeap;
    PriorityQueue<Integer> maxHeap;
    /** initialize your data structure here. */
    public MedianFinder() {
        count = 0;
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>((x1, x2) -> x2 - x1);
    }
    
    public void addNum(int num) {
        count++;
        maxHeap.offer(num);
        minHeap.offer(maxHeap.poll());
        if(count % 2 == 1){
            maxHeap.offer(minHeap.poll());
        }
    }
    
    public double findMedian() {
        if(count % 2 == 0){
            double left = maxHeap.peek();
            double right = minHeap.peek();
            return (left + right)/2;
        }else{
            return (double)maxHeap.peek();
        }
    }
}
