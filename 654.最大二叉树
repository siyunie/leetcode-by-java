/*

给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：

二叉树的根是数组中的最大元素。
左子树是通过数组中最大值左边部分构造出的最大二叉树。
右子树是通过数组中最大值右边部分构造出的最大二叉树。
通过给定的数组构建最大二叉树，并且输出这个树的根节点。

 

示例 ：

输入：[3,2,1,6,0,5]
输出：返回下面这棵树的根节点：

      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1
 

提示：

给定的数组的大小在 [1, 1000] 之间。

*/

/*
方法一:递归
终止条件:l > r
返回值:构造好的最大二叉树的根节点
本次递归做什么:找出最大值,构造根节点,并将最大值左边作为根节点的左子树,将最大值的右边作为根节点的右子树

*/

class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return helper(nums, 0, nums.length - 1);
    }

    public TreeNode helper(int[] nums, int l, int r){
        if(l > r){
            return null;
        }
        int rootIndex = findMax(nums, l, r);
        TreeNode root = new TreeNode(nums[rootIndex]);
        root.left = helper(nums, l, rootIndex - 1);
        root.right = helper(nums, rootIndex + 1, r);
        return root;
    }


    public int findMax(int[] nums, int l, int r){
        int max = Integer.MIN_VALUE;
        int temp = 0;
        for(int i = l; i <= r; i++){
            if(nums[i] > max){
                temp = i;
                max = nums[i];
            }
        }
        return temp;
    }
}
