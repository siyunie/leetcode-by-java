/*

实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 


*/


/*
方法一:递归
先对n<0时进行处理 n=-n x=1/x
考虑算n的x次方不需要乘x次
只需要直到n的x/2次方,如x/2为偶数,将其平方,如为奇数,再多乘一个x即可
所以可以用递归解决

递归三要素
1.终止条件 n=0,所有数的0次方都为1,返回1
2.返回值,返回计算出的值
3.本次递归做什么,通过n/2 half值来算本次递归,如果偶数,则直接half*half,奇数则需要再多乘一个x

*/

class Solution {
    public double myPow(double x, int n) {
        long N = n;
        if(N < 0){
            N = -N;
            x = 1/x;
        }
        return helper(x, N);
    }

    private double helper(double x, long n){
        if(n == 0){
            return 1.0;
        }
        double half = helper(x, n/2);
        if(n % 2 == 0){
            return half*half;
        }else{
            return half*half*x;
        }
        
    }
}
