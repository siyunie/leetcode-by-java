/*

编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true
示例 2:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false

*/

/*
方法一:二分法
将矩阵看成是一个单调递增的数组,这样用标准二分法就可以做了
此时的坐标 mid/col为对应二维数组的行坐标  mid%col为对应二维数组的列坐标

*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        if(row == 0){
            return false;
        }
        int col = matrix[0].length;
        if(col == 0){
            return false;
        }
        int right = row*col - 1;
        int left = 0;
        while(left < right){
            int mid = (left + right + 1) >>> 1;
            if(matrix[mid/col][mid%col] > target){
                right = mid - 1;
            }else{
                left = mid;
            }
        }
        if(matrix[left/col][left%col] == target){
            return true;
        }else{
            return false;
        }
    }
}

/*
方法二:二分法
调用两次二分法 第一次二分法确定target所在行,第二次二分法确定target所在具体位置

*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix[0].length == 0 ||  target < matrix[0][0] || target > matrix[matrix.length - 1][matrix[0].length - 1]){
            return false;
        }
        int top = 0;
        int bottom = matrix.length - 1;
        while(top < bottom){
            int mid = (top + bottom + 1) >>> 1;
            if(target < matrix[mid][0]){
                bottom = mid - 1;
            }else{
                top = mid;
            }
        }
        int left = 0;
        int right = matrix[0].length - 1;
        while(left < right){
            int mid = (left + right + 1) >>> 1;
            if(target < matrix[top][mid]){
                right = mid - 1;
            }else{
                left = mid;
            }
        }
        return matrix[top][left] == target;
    }
}
