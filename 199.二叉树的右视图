/*
给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---

*/

/*
方法一:层序遍历
层序遍历,在res中添加每层最右边的节点值即可

*/

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null){
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        int count = 1;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                TreeNode tmp = queue.poll();
                if(i == 0){
                    res.add(tmp.val);
                }
                if(tmp.right != null){
                    queue.offer(tmp.right);
                }
                if(tmp.left != null){
                    queue.offer(tmp.left);
                }
            }
        }
        return res;
    }
}

/*
方法二:递归
注意这里递归会传递当前节点深度,先右再左递归,当depth >= res.size()说明当前节点是最右节点,此时才添加当前节点的值
因为此时说明此深度之前还没有节点被添加过,所以当前节点为最右节点

*/

class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null){
            return res;
        }
        helper(root, 0);
        return res;
    }
    private void helper(TreeNode root, int depth){
        if(root == null){
            return;
        }
        if(depth >= res.size()){
            res.add(root.val);
        }
        if(root.right != null){
            helper(root.right, depth + 1);
        }
        if(root.left != null){
            helper(root.left, depth + 1);
        }
    }
}
