/*
中心对称数是指一个数字在旋转了 180 度之后看起来依旧相同的数字（或者上下颠倒地看）。

找到所有长度为 n 的中心对称数。

示例 :

输入:  n = 2
输出: ["11","69","88","96"]

*/

/*
方法一:递归法
寻找长度为n的中心对称数,可以先将["11","69","88","96"]作为左右两边的数,然后再在中间插入n-2个数,因此递归处理
用map保存长度1和2的结果,避免重复计算

注意这得到结果之后,要删除0开头的字符串,因为n == 2时有中心对称数"00", "00"放在中间是可以的,但是放在头尾是不符合要求的
因此要在结果集里删除头部为0的字符串

*/

class Solution {
    Map<Integer, List<String>> map = new HashMap<>();
    public List<String> findStrobogrammatic(int n) {
        if(n == 1){
            return new ArrayList<String>(){{
                add("1");
                add("0");
                add("8");
            }};
        }
        List<String> list = helper(n);
        List<String> res = new ArrayList<>();
        for(int i = 0; i < list.size(); i++){
            if(list.get(i).charAt(0) == '0'){
                continue;
            }
            res.add(list.get(i));
        }
        return res;
    }
    
    private List<String> helper(int n){
        if(map.containsKey(n)){
            return map.get(n);
        }
        if(n == 1){
            List<String> list = new ArrayList<String>(){{
                add("1");
                add("0");
                add("8");
            }};
            map.put(1, list);
            return list;
        }
        if(n == 2){
            List<String> list = new ArrayList<String>(){{
                add("00");
                add("11");
                add("69");
                add("88");
                add("96");
        }};
        map.put(2, list);
        return list;
        }
        List<String> list1 = helper(2);
        List<String> list2 = helper(n - 2);
        List<String> res = new ArrayList<>();
        for(int i = 0; i < list1.size(); i++){
            for(int j = 0; j < list2.size(); j++){
                res.add(list1.get(i).charAt(0) + list2.get(j) + list1.get(i).charAt(1));
            }
        }
        return res;
    }
}
