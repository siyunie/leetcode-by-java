/*

在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:

输入: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.

*/

/*
方法一：res[]数组保存包含此节点的最大值res[1]和不包含此节点的最大值res[0]，对每一个节点，都有左右节点，左右节点数组用同样方法保存
所以，对res[0]即不包含此节点的情况，最大值为左右子树最大值之和，即res[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
因为左右子树最大值之和同样需要考虑包不包括左右子树的根节点所以为max(left[0], left[1])与max(right[0], right[1])
对res[1]即包含此节点情况，最大值为左右子树不包括左右子树的根节点的最大值之和加上此节点的值，即res[1] = root.val + left[0] + right[0];
*/


class Solution {

    private int[] helper(TreeNode root){
        int[] res = new int[2];
        if(root == null){
            return res;
        }
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        res[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
        res[1] = root.val + left[0] + right[0];
        return res;
    }

    public int rob(TreeNode root) {
        int[] res = helper(root);
        return Math.max(res[0], res[1]);
    }
}
