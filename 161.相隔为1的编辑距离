/*

给定两个字符串 s 和 t，判断他们的编辑距离是否为 1。

注意：

满足编辑距离等于 1 有三种可能的情形：

往 s 中插入一个字符得到 t
从 s 中删除一个字符得到 t
在 s 中替换一个字符得到 t
示例 1：

输入: s = "ab", t = "acb"
输出: true
解释: 可以将 'c' 插入字符串 s 来得到 t。
示例 2:

输入: s = "cab", t = "ad"
输出: false
解释: 无法通过 1 步操作使 s 变为 t。
示例 3:

输入: s = "1203", t = "1213"
输出: true
解释: 可以将字符串 s 中的 '0' 替换为 '1' 来得到 t。

*/

/*
方法一:遍历一遍
默认s长度小于等于t,如果s长度大于t,将两个字符串颠倒,如果长度差大于1,直接返回false
遍历,当有字符不一样时,情况1:字符串长度不同,那么长字符串的从i+1开始子串必须和短字符串从i开始的子串相同
                情况2:字符串长度相同,那么两字符串剩下的子串一定相同
遍历结束还未返回时,判断两字符串长度是否不同,不同说明正好是长的字符串多了最后一个字符,返回true.不然长度相同,说明字符串完全相同,返回false

*/

class Solution {
    public boolean isOneEditDistance(String s, String t) {
        int smallLen = s.length();
        int largeLen = t.length();
        if(smallLen > largeLen){
            return isOneEditDistance(t, s);
        }
        if(largeLen - smallLen > 1){
            return false;
        }
        for(int i = 0; i < smallLen; i++){
            if(s.charAt(i) != t.charAt(i)){
                if(smallLen != largeLen){
                    return s.substring(i).equals(t.substring(i + 1));
                }else{
                    return s.substring(i + 1).equals(t.substring(i + 1));
                }
            }
        }
        return smallLen != largeLen;
    }
}
