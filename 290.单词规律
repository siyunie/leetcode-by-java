/*
给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true
示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false
示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false
示例 4:

输入: pattern = "abba", str = "dog dog dog dog"
输出: false
说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。    

*/

/*
方法一:HashMap
要求是一一对应,双向连接 因此维持两个HashMap存 character -> string 和 string -> character

*/

class Solution {
    public boolean wordPattern(String pattern, String str) {
        char[] cha = pattern.toCharArray();
        String[] strArr = str.split(" ");
        if(cha.length != strArr.length){
            return false;
        }
        Map<Character, String> map1 = new HashMap<>();
        Map<String, Character> map2 = new HashMap<>();
        for(int i = 0; i < cha.length; i++){
            if(map1.containsKey(cha[i])){
                if(!map1.get(cha[i]).equals(strArr[i])){
                    return false;
                }
            }else if(map2.containsKey(strArr[i])){
                if(!map2.get(strArr[i]).equals(cha[i])){
                    return false;
                }
            }
            else{
                map1.put(cha[i], strArr[i]);
                map2.put(strArr[i], cha[i]);
            }
        }
        return true;
    }
}
