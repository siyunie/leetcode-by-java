/*
给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]

/*




/*
方法一:回溯法
先对数组进行排序 这样回溯法时可以剪枝
排序后数组递增
当residual < candidates[i]时直接break
当candidates[i]==candidate[i-1]时不放入避免重复

*/


class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, 0, target, new Stack<Integer>(), res);
        return res;
    }
    private void helper(int[] candidates, int start, int residual, Stack<Integer> stack, List<List<Integer>> res){
        if(residual == 0){
            res.add(new ArrayList<>(stack));
            return;
        }
        
        for(int i = start; i < candidates.length; i++){
            if(residual < candidates[i]){
                break;
            }
            if(i > start && candidates[i] == candidates[i - 1]){
                continue;
            }
            stack.push(candidates[i]);
            helper(candidates, i + 1, residual - candidates[i], stack, res);
            stack.pop();
        }
    }
}
