/*
给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
进阶:
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？

*/

/*
方法一:循环
直接循环求解

*/

class Solution {
    public int addDigits(int num) {
        while(num >= 10){
            num = num/10 + num%10;
        }
        return num;
    }
}

/*
方法二:数学法
为满足进阶要求,不使用循环和递归,且时间O(1)
所有位相加直到只剩一位可以看成是 将数对9取余,因为如果相加得10则需要再次相加,得9的话就不用进位,因此对9取余,但是这样有例外就是本身能被9整除的情况
因此先num - 1,然后对9取余之后再+1,即先借一位出去,然后还回来

*/

class Solution {
    public int addDigits(int num) {
        return (num - 1)%9 + 1;
    }
}
