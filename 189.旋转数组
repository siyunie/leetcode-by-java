/*
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入: [-1,-100,3,99] 和 k = 2
输出: [3,99,-1,-100]
解释: 
向右旋转 1 步: [99,-1,-100,3]
向右旋转 2 步: [3,99,-1,-100]
说明:

尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
要求使用空间复杂度为 O(1) 的 原地 算法。

*/

/*
方法一:递归

*/

class Solution {
    public void rotate(int[] nums, int k) {
        helper(nums, k);
    }

    private void helper(int[] nums, int k){
        if(k == 0){
            return;
        }
        int pre = nums[0];
        for(int i = 1; i < nums.length; i++){
            int tmp = nums[i];
            nums[i] = pre;
            pre = tmp;
        }
        nums[0] = pre;
        helper(nums, k - 1);
    }
}

/*
方法二:暴力 双层遍历

*/

class Solution {
    public void rotate(int[] nums, int k) {
        for(int i = 0; i < k; i++){
            int pre = nums[0];
            for(int j = 1; j < nums.length; j++){
                int tmp = nums[j];
                nums[j] = pre;
                pre = tmp;
            }
            nums[0] = pre;
        }
    }
}

/*
方法三:翻转
先翻转整个数组,再分别翻转前k个数,和后面的所有数
注意此处 k %= nums.length 因为翻转数组长度的整数倍等于没有变化,不取余的话,翻转的时候会报错

*/

class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }
    private void reverse(int[] nums, int start, int end){
        while(start < end){
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            start++;
            end--;
        }
    }
}


