/*
给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

*/

/*
方法一:动态规划
用dp数组保存中间值简化循环
dp[i]保存前n-1个数的和,则dp[j+1]-dp[i]保存第i到第j个数的和

*/

class Solution {
    public int subarraySum(int[] nums, int k) {
        int[] dp = new int[nums.length + 1];
        for(int i = 1; i <= nums.length; i++){
            dp[i] = dp[i - 1] + nums[i - 1];
        }
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j <= nums.length; j++){
                if(dp[j] - dp[i] == k){
                    count++;
                }
            }
        }
        return count;
    }
}

/*
方法二:避免使用数组额外空间,直接用sum记录从i开始到j的数组和,每次更新i时重置sum为0
*/

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            int sum = 0;
            for(int j = i; j < nums.length; j++){
                sum += nums[j];
                if(sum == k){
                    count++;
                }
            }
        }
        return count;
    }
}

/*
方法三:hashmap保存前面出现的所有数的和,Key为sum,value为key出现的次数,所以如果sum-k存在,则k就是sum-(sum-k),即这两者之间的连续数组和
所以当前面存在sum-k时,记录出现的个数,即为连续数组的个数

*/

class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int sum = 0, count = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            if(map.containsKey(sum - k)){
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}

