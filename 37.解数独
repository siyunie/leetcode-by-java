/*

编写一个程序，通过已填充的空格来解决数独问题。

一个数独的解法需遵循如下规则：

数字 1-9 在每一行只能出现一次
数字 1-9 在每一列只能出现一次
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次
空白格用 '.' 表示。

Note:

给定的数独序列只包含数字 1-9 和字符 '.' 
你可以假设给定的数独只有唯一解
给定数独永远是 9x9 形式的

*/


/*
方法一:回溯法

维持三个boolean数组,保存某行,某列,某块的数字1-9是否使用
对每个未填的数依次填上1-9,判断是否对此行此列此块的boolean数组冲突,如无冲,填上数字,继续寻找下一个未填数字,直到全部填完
如有冲突,回溯,重置状态,将此处数组置回'.', 将对应三个boolean数组置为false

*/


class Solution {
    public void solveSudoku(char[][] board) {
        boolean[][] row = new boolean[9][10];
        boolean[][] col = new boolean[9][10];
        boolean[][] block = new boolean[9][10];

        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    int num = board[i][j] - '0';
                    row[i][num] = true;
                    col[j][num] = true;
                    block[i/3*3+j/3][num] = true;
                }
            }
        }
        dfs(board, row, col, block, 0, 0);
    }
    private boolean dfs(char[][] board, boolean[][] row, boolean[][] col, boolean[][] block, int i, int j){
        while(board[i][j] != '.'){ //寻找最近一个需要填充的数,并判断是否所有数组已经填充完毕,如是则返回
            j++;
            if(j == 9){
                j = 0;
                i++;
            }
            if(i == 9){
                return true;
            }
        }
        for(int num = 1; num <= 9; num++){
            int blockIndex = i/3*3 + j/3;
            if(!row[i][num] && !col[j][num] && !block[blockIndex][num]){
                board[i][j] = (char)('0' + num);
                row[i][num] = true;
                col[j][num] = true;
                block[blockIndex][num] = true;

                if(dfs(board, row, col, block, i, j)){//此处不需要改变传入下一阶段的i,j值,因为dfs开头有判断,会自动寻找最近一个未填的数,避免越界
                    return true;
                }

                board[i][j] = '.';
                row[i][num] = false;
                col[j][num] = false;
                block[blockIndex][num] = false;
            }
        }
        return false;
    }
}

//回溯法写法二

class Solution {
    public void solveSudoku(char[][] board) {
        boolean[][] row = new boolean[9][9];
        boolean[][] col = new boolean[9][9];
        boolean[][] block = new boolean[9][9];
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    int num = board[i][j] - '1';
                    row[i][num] = true;
                    col[j][num] = true;
                    block[(i/3)*3 + j/3][num] = true;
                }
            }
        }
        traceback(board, 0, 0, row, col, block);
    }

    private boolean traceback(char[][] board, int i , int j, boolean[][] row, boolean[][] col, boolean[][] block){
        while(board[i][j] != '.'){
            j++;
            if(j == 9){
                j = 0;
                i++;
            }
            if(i == 9){
                return true;
            }
        }
        for(int num = 0; num <= 8; num++){
            int tmp = (i/3)*3 + j/3;
            if(!row[i][num] && !col[j][num] && !block[tmp][num]){
                row[i][num] = true;
                col[j][num] = true;
                block[tmp][num] = true;
                board[i][j] = (char) ('1' + num);
                boolean res = traceback(board, i, j, row, col, block);
                if(res){
                    return true;
                }
                row[i][num] = false;
                col[j][num] = false;
                block[tmp][num] = false;
                board[i][j] = '.';
            }
        }
        return false;
    }
}
