/*
给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

*/

/*
方法一：回溯+剪枝
利用stack，顺序取数组中的值，避免重复
此时先对数组排序，然后在循环时加判断residual-candidiate[i]<0直接结束，因为后面的可能的数是越来越大的，这样剪枝可以减少循环次数，并且减小栈的深度
*/

//未剪枝
import java.util.Stack;

class Solution {
    Stack<Integer> stack=new Stack<>();
    List<List<Integer>> list=new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        traceback(candidates,0,target);
        return list;
    }
    
    public void traceback(int[] candidates,int start,int residual){
        if(residual==0){
            list.add(new ArrayList<>(stack));
            return;
        }else if(residual<0){
            return;
        }
        for(int i=start;i<candidates.length;i++){//顺序判断避免重复
            stack.push(candidates[i]);
            traceback(candidates,i,residual-candidates[i]);//此处一定传入i，这样递归start也是从i开始，因为题目要求元素可以重复使用
            stack.pop();
        }
    }
}

//剪枝后
import java.util.Stack;

class Solution {
    Stack<Integer> stack=new Stack<>();
    List<List<Integer>> list=new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates); //排序后可以剪枝
        traceback(candidates,0,target);
        return list;
    }
    
    public void traceback(int[] candidates,int start,int residual){
        if(residual==0){
            list.add(new ArrayList<>(stack));
            return;
        }else if(residual<0){
            return;
        }
        for(int i=start;i<candidates.length&&residual-candidates[i]>=0;i++){//顺序判断避免重复
            stack.push(candidates[i]);
            traceback(candidates,i,residual-candidates[i]);
            stack.pop();
        }
    }
}

/*
方法三:回溯剪枝另一种写法

*/

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, res, new Stack<Integer>());
        return res;
    }

    public void helper(int[] candidates, int residual, int index, List<List<Integer>> res, Stack<Integer> stack){
        if(residual == 0){
            res.add(new ArrayList<>(stack));
        }
        for(int i = index; i < candidates.length; i++){
            if(residual < candidates[i]){
                break;
            }
            stack.push(candidates[i]);
            helper(candidates, residual - candidates[i], i, res, stack);
            stack.pop();
        }
    }
}
