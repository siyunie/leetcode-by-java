/*
编写一个程序，找出第 n 个丑数。

丑数就是只包含质因数 2, 3, 5 的正整数。

示例:

输入: n = 10
输出: 12
解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。
说明:  

1 是丑数。
n 不超过1690。

*/

/*
方法一:动态规划+三指针
dp数组储存按序丑数,因为按序,所以每次放入时都要放入下一个最小的丑数,因此维持三指针,来指向对应*2 *3 *5更新到了哪里每次命中就把对应的指针+1
同时更新指针时一定不能用else if,因为有时同时命中两个,如6 = 2 * 3 = 3 * 2, 此时都需要更新

*/

class Solution {
    public int nthUglyNumber(int n) {
        int i2 = 0;
        int i3 = 0;
        int i5 = 0;
        int[] dp = new int[n];
        dp[0] = 1;
        for(int i = 1; i < n; i++){
            dp[i] = Math.min(dp[i2]*2, Math.min(dp[i3]*3, dp[i5]*5));
            if(dp[i] == dp[i2]*2){
                i2++;
            }
            if(dp[i] == dp[i3]*3){
                i3++;
            }
            if(dp[i] == dp[i5]*5){
                i5++;
            }
        }
        return dp[n - 1];
    }
}
