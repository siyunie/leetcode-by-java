/*
方法一:动态规划
考虑到只要求输出分割次数而不是分割结果集,所以考虑动态规划
dp[i] 保存s从0-i的字符串分割为回文字符串的最小次数
动态转移方程: 如果当前串本身为回文,直接dp[i] = 0, 否则遍历之前所有串即从j = 0开始一直到j = i - 1如果 s从j-i的部分回文则,dp[i] = min(dp[i],dp[j] + 1)
即找前面分割成一个已经知道结果的从0开始的串dp[j]和后部分为回文子串的两部分,求最小的dp[j],此时dp[i] = dp[j] + 1 即从此处再分割一次

此处一定为  if(helper(s, j + 1, i)){
               dp[i] = Math.min(dp[i], dp[j] + 1);
           }
           
一定是helper(s, j + 1, i), 因为dp[j]表示0-j,所以判断一定要从j + 1开始

*/

class Solution {
    public int minCut(String s) {
        if(s.length() <= 1){
            return 0;
        }
        int[] dp = new int[s.length()];
        for(int i = 1; i < s.length(); i++){
            if(helper(s, 0, i)){
                dp[i] = 0;
            }else{
                dp[i] = dp[i - 1] + 1;
                for(int j = 0; j < i; j++){
                    if(helper(s, j + 1, i)){
                        dp[i] = Math.min(dp[i], dp[j] + 1);
                    }
                }
            }
        }
        return dp[s.length() - 1];
    }

    private boolean helper(String s, int start, int end){
        while(start < end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
