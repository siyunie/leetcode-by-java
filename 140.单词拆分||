/*
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：

输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：

输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]

*/

/*
方法一:回溯法+记忆化
一开始直接使用回溯法,超时,因为有很多重复计算,然后考虑记忆化
用hashmap存储,key为开始位置,value为以开始位置开始所有可能字符串
每次回溯前先判断hashmap有无key = start,有则直接返回结果
每次回溯过程中都是新建的List tmp,所以不需要重置状态

*/

class Solution {
    Map<Integer, List<String>> map = new HashMap<>();
    public List<String> wordBreak(String s, List<String> wordDict) {
        return helper(s, wordDict, 0);
    }
    public List<String> helper(String s, List<String> wordDict, int start){
        if(map.containsKey(start)){
            return map.get(start);
        }
        List<String> res = new LinkedList<>();
        if(start == s.length()){
            res.add("");
            return res;
        }
        for(int i = start + 1; i <= s.length(); i++){
            if(wordDict.contains(s.substring(start, i))){
                List<String> tmp = helper(s, wordDict, i);
                for(String str: tmp){
                    if(!str.equals("")){
                        str = " " + str;
                    }
                    res.add(s.substring(start, i) + str);
                }
            }
        }
        map.put(start, res);
        return res;
    }
}
