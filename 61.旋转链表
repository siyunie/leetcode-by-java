/*

给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

*/


/*
方法一:
先将链表接成环,然后再找到断开点断开即可
计算链表长度为count
新的尾节点在 count - 1 - k
因为k有可能大于链表长度,所以k = k%count 即count - 1 - k%count
因为k多走n个链表长度等于做了n次循环又回到了初始状态

*/

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null){
            return null;
        }else if(head.next == null){
            return head;
        }
        int count = 1;
        ListNode old_tail = head;
        while(old_tail.next != null){
            old_tail = old_tail.next;
            count++;
        }
        old_tail.next = head;
        ListNode new_tail = head;
        for(int i = 0; i < count - 1 - k%count; i++){
            new_tail = new_tail.next;
            head = head.next;
        }
        head = head.next;
        new_tail.next = null;
        return head;
    }
}



/*
方法二:直接倒序找倒数第k%len个节点即为新的头节点,将前一节点的next置为null,然后把原来的尾节点接到原来的头节点前即可

*/

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || k == 0){
            return head;
        }
        int len = 0;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode tmp = dummy;
        while(tmp.next != null){
            len++;
            tmp = tmp.next;
        }
        k %= len;
        if(k == 0){
            return head;
        }
        tmp = dummy;
        while(k != 0){
            tmp = tmp.next;
            k--;
        }
        ListNode pre = dummy;
        while(tmp.next != null){
            tmp = tmp.next;
            pre = pre.next;
        }
        ListNode cur = pre.next;
        pre.next = null;
        tmp.next = dummy.next;
        return cur;
    }
}
