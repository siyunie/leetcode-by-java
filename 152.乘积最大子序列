/*

给定一个整数数组 nums ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

示例 1:

输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
示例 2:

输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。

*/

/*方法一：动态规划
max为最大乘积
imax为以此点为终点的连续子数组最大乘积
imin为以此点为终点的连续子数组最小乘积
max初始化为Integer.MIN_VALUE
imax与imin初始化为1，因为为乘积，所以乘1没有任何影响
当nums[i]<0是，交换imax,imin，然后再×nums[i]更新值，这样保证imax一定为以此此点为终点的连续子数组最大乘积，imin一定为以此此点为终点的连续子数组最小乘积
更新max为所有可能的最大乘积
*/

class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length == 0){
            return 0;
        }else if(nums.length == 1){
            return nums[0];
        }

        int max = Integer.MIN_VALUE;
        int imax = 1;
        int imin = 1;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] < 0){
                int temp = imax;
                imax = imin;
                imin = temp;
            }
            imax = Math.max(nums[i], imax*nums[i]);
            imin = Math.min(nums[i], imin*nums[i]);
            max = Math.max(max, imax);
        }
        return max;
    }
}
