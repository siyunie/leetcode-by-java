/*
现在你总共有 n 门课需要选，记为 0 到 n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。
说明:

输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。
你可以假定输入的先决条件中没有重复的边。
提示:

这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。
通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。
拓扑排序也可以通过 BFS 完成。

*/

/*
方法一：
拓扑排序，判断是否是有向无环图
广度优先遍历
维持一个入度表indegree
遍历prerequisites,如果有课程需要前置课程则入度加一，如果课程入度为零，说明没有前置课程需要，将其加入队列中
遍历队列头,poll出队列头部课程，并把numCourses--,将队列头poll出来的课程与prerequisites中比较,如果为某课程前置课程,则将此课程入度减一,如果入度为0，则将其加入队列
最后判断numCourses是否为0,即是否有课程入度不为0,说明无法达到,形成了环

*/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(prerequisites.length == 0){
            return true;
        }
        int[] indegree = new int[numCourses];
        for(int[] p: prerequisites){
            indegree[p[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < numCourses; i++){
            if(indegree[i] == 0){
                queue.add(i);
            }
        }
        
        while(!queue.isEmpty()){
            int temp = queue.poll();
            numCourses--;
            for(int[] p: prerequisites){
                if(p[1] == temp){
                    indegree[p[0]]--;
                    if(indegree[p[0]] == 0){
                        queue.add(p[0]);
                    }
                }
            }
        }
        return numCourses == 0;
    }
}
