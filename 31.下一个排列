/*
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

*/

/*
方法一：从后往前遍历，找到第一个升序排列的数，即nums[i-1]<nums[i],记录位置，注意此时是从后往前遍历的，所以这个数之后的所有数都是降序排列的
此时为了得到下一个字典序的最大的排序，从后往前遍历，找到第一个大于记录位置的数，即nums[i-1]，因为i-1之后的数都是降序排列的，所以第一个大于nums[i-1]
的数一定是最接近nums[i-1]且大于nums[i-1]的数，交换这两个数位置
此时i-1之后的数仍然还是降序排列的，从i-1到最尾端的数，不断交换，向中间逼近，使i-1之后的数都升序排列，此时得到的就是结果
对于不存在下一个更大的排序，即本身是降序排列，sort函数会将其整个交换，得到升序排列
*/

class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length==1){
            return;
        }
        int index=nums.length-1;
        for(;index>0;index--){
            if(nums[index]>nums[index-1]){
                break;
            }
        }
        if(index-1>=0){          //注意此时一定要判断index-1是否>=0，不然对于不存在下一个更大排序的降序排列，index=0,index-1=-1，nums[index-1]会抛出java.lang.ArrayIndexOutOfBoundsException异常
            for(int i=nums.length-1;i>=index-1;i--){
                if(nums[i]>nums[index-1]){
                    swap(nums,index-1,i);
                    break;
                }
            }
        }
        sort(nums,index);
    }
    public void sort(int[] nums,int start){
        int k=nums.length-1;
        while(start<k){
            swap(nums,start,k);
            start++;
            k--;
        }
    }
    public void swap(int[] nums,int i,int j){        
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
