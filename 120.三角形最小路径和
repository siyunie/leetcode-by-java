/*
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

说明：

如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。

*/

/*
方法一:动态规划
dp[i][j]保存走到三角形的[i][j]点处的最短路径
动态转移方程为上一侧左右两路径的最小值+此数的值 
注意此时要判断如果是每一行的第一个数,只能由上一行第一个数走到, 如果是每行最后一个数,只能由上一行最后一个数走到

*/


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int row = triangle.size();
        if(row == 0){
            return 0;
        }
        if(row == 1){
            return triangle.get(0).get(0);
        }
        int col = triangle.get(row - 1).size();
        int[][] dp = new int[row][col];
        dp[0][0] = triangle.get(0).get(0);
        int preLast = dp[0][0];
        for(int i = 1; i < row; i++){
            dp[i][0] = dp[i - 1][0] + triangle.get(i).get(0);
            for(int j = 1; j < triangle.get(i).size(); j++){
                int tmp = triangle.get(i).get(j);
                if(j == triangle.get(i).size() - 1){
                    dp[i][j] = preLast + tmp;
                }else{
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + tmp;
                }
            }
            preLast = dp[i][triangle.get(i).size() - 1];
        } 
        int min = dp[row - 1][0];
        for(int j = 0; j < col; j++){
            min = Math.min(min, dp[row - 1][j]);
        }
        return min;
    }
}

//或者将min放在每次循环中更新,最后不用单独对最后一行找最小min

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int row = triangle.size();
        if(row == 0){
            return 0;
        }
        if(row == 1){
            return triangle.get(0).get(0);
        }
        int col = triangle.get(row - 1).size();
        int[][] dp = new int[row][col];
        dp[0][0] = triangle.get(0).get(0);
        int preLast = dp[0][0];
        int min = preLast;
        for(int i = 1; i < row; i++){
            dp[i][0] = dp[i - 1][0] + triangle.get(i).get(0);
            min = dp[i][0];
            for(int j = 1; j < triangle.get(i).size(); j++){
                int tmp = triangle.get(i).get(j);
                if(j == triangle.get(i).size() - 1){
                    dp[i][j] = preLast + tmp;
                }else{
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + tmp;
                }
                if(i == row - 1){
                    min = Math.min(min, dp[i][j]);
                }
            }
            preLast = dp[i][triangle.get(i).size() - 1];
        } 
        return min;
    }
}

/*
方法二:动态规划
自底向上
自底向上就不用考虑最后一轮找最小值,直接返回dp[0][0]即可 以及不用考虑本层第一个数只能由上一层第一个数走到,最后一个数只能由上一层最后一个数走到
即 动态转移方程 dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle.get(i).get(j);

*/

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int row = triangle.size();
        if(row == 0){
            return 0;
        }
        if(row == 1){
            return triangle.get(0).get(0);
        }
        int col = triangle.get(row - 1).size();
        int[][] dp = new int[row][col];
        dp[0][0] = triangle.get(0).get(0);
        for(int j = 0; j < col; j++){
            dp[row - 1][j] = triangle.get(row - 1).get(j);
        }
        for(int i = row - 2; i >= 0; i--){
            for(int j = 0; j < triangle.get(i).size(); j++){
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle.get(i).get(j);
            }
        } 
        return dp[0][0];
    }
}

/*
方法三:动态规划
考虑到进阶要求 只使用 O(n)的额外空间 使用一维dp数组
与方法二一样自底向上动态规划, 对dp[j]赋值时比较dp[j]与dp[j + 1]即下一层的左右两条路径的长度,取短的那条对本层dp[j]赋值 
即 动态转移方程 dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);

*/

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int row = triangle.size();
        if(row == 0){
            return 0;
        }
        if(row == 1){
            return triangle.get(0).get(0);
        }
        int col = triangle.get(row - 1).size();
        int[] dp = new int[col];
        for(int j = 0; j < col; j++){
            dp[j] = triangle.get(row - 1).get(j);
        }
        for(int i = row - 2; i >= 0; i--){
            for(int j = 0; j < triangle.get(i).size(); j++){
                dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);
            }
        } 
        return dp[0];
    }
}

/*
方法四:递归+记忆化
递归自顶向下 直接递归会有大量重复计算导致超时,所以记忆化,维持memo数组保存已经算过路径的长度,如果此条路径已经算过,直接返回

注意此时memo数组一定要为Integer, 如果为int型,默认未赋值时为0,进行判断 此路径是否已经算过时,只能memo[level][index] != 0 
但是有可能本来路径长度就为0 比如题目复杂时,点的值有负数,导致路径长度为0,会误判
所以memo要为Integer,这样可以直接判断是否为null 来知道此路径是否已经算过

递归三要素:
1.递归的终止条件:此路径已经计算过,或者到了最后一行, 到了最后一行时先对memo赋值为最后一行节点值再返回
2.本次递归返回什么:此节点的最短路径值
3.本次递归做什么:算此节点的最短路径长,即取左右两条路径的短的那条加上此节点的值

*/

class Solution { 
    public int minimumTotal(List<List<Integer>> triangle) {
        int row = triangle.size();
        int col = triangle.get(row - 1).size();
        Integer[][] memo = new Integer[row][col];
        return helper(triangle, memo, row, 0, 0);
    }

    public int helper(List<List<Integer>> triangle, Integer[][] memo, int row, int level, int index){
        if(memo[level][index] != null){
            return memo[level][index];
        }
        if(level == row - 1){
            memo[row - 1][index] = triangle.get(row - 1).get(index);
            return memo[row - 1][index];
        }
        int left = helper(triangle, memo, row, level + 1, index);
        int right = helper(triangle, memo, row, level + 1, index + 1);
        memo[level][index] = Math.min(left, right) + triangle.get(level).get(index);
        return memo[level][index];
    }
}
