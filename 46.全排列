/*

给定一个没有重复数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

*/

/*

方法一：回溯法
回溯法即深度遍历优先+状态重置+剪枝（本题无剪枝）
一定要注意状态重置，递归算法递归到叶子节点之后原路返回，所以每个节点经过两次，要保证第二次经过节点时的状态与第一次相同，所以要状态重置
状态可用boolean数组，哈希表，位掩码等来保存
注意最后找到结果add进结果中时，一定要new一个新list来传递stack的值，不然直接添加stack是引用传递，之后stack改变，结果中的值也会改变

*/

import java.util.Stack;

class Solution {
    List<List<Integer>> list=new ArrayList<>();
    Stack<Integer> stack=new Stack<>();
    
    public List<List<Integer>> permute(int[] nums) {
        boolean[] flag=new boolean[nums.length];
        traceBack(nums,flag);
        return list;
    }
    
    public void traceBack(int[] nums,boolean[] flag){
        if(stack.size()==nums.length){
            list.add(new ArrayList<>(stack));//不能直接add(stack)，引用传递传递的是stack的引用，所以stack改变list里保存的值也会改变，只能new一个List来保证是值不会改变
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(!flag[i]){//判断是否这个数已经used
                stack.push(nums[i]);
                flag[i]=true;//把状态置为used
                traceBack(nums,flag);
                stack.pop();
                flag[i]=false;//状态重置
            }
        }
    }
}
