/*
给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。

说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。

示例 1:

输入: [3,2,3]
输出: [3]
示例 2:

输入: [1,1,1,3,3,2,2,2]
输出: [1,2]

*/

/*
方法一: Boyer-Moore 摩尔投票算法 变形
因为大于n/3的元素最多只有两个 所以维持两个候选人和对应的两个候选票数
第一次遍历数组,当与任一候选人相同,对应候选人票数加1 如果与两个候选人都不同,则判判断两候选人票数是否为0,如任一为0则更新为0的候选人为当前数,并将对应候选人票数置为1
如两个候选人票数都不为0,则将两候选人票数均减1
注意此时得到的最终候选人结果不一定是最终结果
第二次遍历,统计两个最终候选人票数,看是否大于n/3,如大于则加入结果集中

*/

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return list;
        }
        int candidate1 = nums[0];
        int candidate2 = nums[0];
        int count1 = 0;
        int count2 = 0;
        for(int num: nums){
            if(num == candidate1){
                count1++;
                continue;
            }
            if(num == candidate2){
                count2++;
                continue;
            }
            if(count1 == 0){
                candidate1 = num;
                count1 = 1;
                continue;
            }
            if(count2 == 0){
                candidate2 = num;
                count2 = 1;
                continue;
            }
            count1--;
            count2--;
        }
        count1 = 0;
        count2 = 0;
        for(int num: nums){
            if(num == candidate1){
                count1++;
            }else if(num == candidate2){
                count2++;
            }
        }
        if(count1 > nums.length/3){
            list.add(candidate1);
        }
        if(count2 > nums.length/3){
            list.add(candidate2);
        }
        return list;
    }
}
