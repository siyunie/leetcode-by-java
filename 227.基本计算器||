/*
实现一个基本的计算器来计算一个简单的字符串表达式的值。

字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。

示例 1:

输入: "3+2*2"
输出: 7
示例 2:

输入: " 3/2 "
输出: 1
示例 3:

输入: " 3+5 / 2 "
输出: 5
说明：

你可以假设所给定的表达式都是有效的。
请不要使用内置的库函数 eval。

*/

/*
方法一:栈
用栈保存数字,当遇到运算符时,对+或-直接加入对应的正数或负数,遇到*或/时将最近两个数组从栈中拿出计算再放入
最后将栈中所有数相加的结果
num维持还未放入栈的数,当遇到运算符或已经时最后一个数时才将其加入栈中
加减乘除和空格的ASCII码都小于'0' 所以可以直接通过与'0'比较判断是否是数字

注意这里为了避免最后一个数未被计算 这里一定是 if(c >= '0') 和 if((c < '0' && c != ' ') || i == s.length() - 1)
而不是else if((c < '0' && c != ' ') || i == s.length() - 1)
不然会忽略最后一位 一位内最后一位一定是数字,此时做过上面的num = num*10 -'0' + c;之后,不再有压栈操作,即最后一个数未被计算
所以这里不能用else if

*/

class Solution {
    public int calculate(String s) {
        char sign = '+'; //保存上一个符号
        Stack<Integer> stack = new Stack<>();
        int num = 0;
        int res = 0;
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c >= '0'){ //加减乘除空格的ASCII码都小于'0'
                num = num*10 -'0' + c; //先减'0'防止溢出
            }
            if((c < '0' && c != ' ') || i == s.length() - 1){
                switch(sign){
                    case '+':
                        stack.push(num);
                        break;
                    case '-':
                        stack.push(-num);
                        break;
                    case '*':
                        stack.push(stack.pop() * num);
                        break;
                    case '/':
                        stack.push(stack.pop() / num);
                        break;
                }
                sign = c;
                num = 0;
            }
        }
        while(!stack.isEmpty()){
            res += stack.pop();
        }
        return res;
    }
}
