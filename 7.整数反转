给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。

示例 1:

输入: 123
输出: 321
 示例 2:

输入: -123
输出: -321
示例 3:

输入: 120
输出: 21
注意:

假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31− 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。


/*用数学方法来反转数字，先转换成字符串在使用stack反转过程太复杂，使用取余数字更方便。
同时要判断不能大于int型范围，方法一用Long型保存反转数字，与Integer.MAX_VALUE和Integer.MIN_VALUE比较判断再强转回int
方法二 在*10之前与Integer.MAX_VALUE/10和Integer.MIN_VALUE比较，这种方法不用用Long型保存数字*/


//方法1
class Solution {
    public int reverse(int x) {
        if(x==0){
            return 0;
        }
        long iter=0;
        int temp=0;
        while(x!=0){
            temp=x%10;
            x=x/10;
            iter=iter*10+temp;
            if(iter>=Integer.MAX_VALUE||iter<=Integer.MIN_VALUE){
                return 0;
            }
        }
        return (int)iter;
    }
}



/*方法2 
因为可能溢出的情况x一定为32位,并且因为x为int, 所以开头一定为1 2 -1 -2中的一个,因此最后一次取余相加时,最后一次temp的结果一定为1 2 -1 -2中的一个
因为整型最大值是2147483647，最小值是-2147483648 所以最后一次 + temp 一定不会出现 > 7 或者 <-8导致溢出
因此不需要判断
(iter == Integer.MAX_VALUE / 10 && temp > 7)) return 0;
或
(iter == Integer.MAX_VALUE / 10 && temp < -8)) return 0;

*/

class Solution {
    public int reverse(int x) {
        if(x==0){
            return 0;
        }
        int iter=0;
        int temp=0;
        while(x!=0){
            temp=x%10;
            x=x/10;
            if(iter>Integer.MAX_VALUE/10||iter<Integer.MIN_VALUE/10){
                return 0;
            }
            iter=iter*10+temp;
        }
        return iter;
    }
}
