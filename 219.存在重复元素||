/*
给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。

示例 1:

输入: nums = [1,2,3,1], k = 3
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1
输出: true
示例 3:

输入: nums = [1,2,3,1,2,3], k = 2
输出: false

*/

/*
方法一:HashSet
这里的题目说的很不清楚, 意思是只要存在一对索引i和j,满足nums[i] == nums[j]且 j - i小于等于k则返回true,如果一对也不存在则返回false
这里考虑维持一个大小为k的hashset,每次判断值是否已经存在,存在则返回true,每次添加元素之后判断set大小是否已经大于k,如大于则移除最前面的元素
这样保证在set里的所有元素的距离小于k

*/

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new HashSet<>();
        for(int i = 0; i < nums.length; i++){
            if(set.contains(nums[i])){
                return true;
            }
            set.add(nums[i]);
            if(set.size() > k){
                set.remove(nums[i - k]);
            }
        }
        return false;
    }
}

