/*

给定一个未排序的整数数组，找出最长连续序列的长度。

要求算法的时间复杂度为 O(n)。

示例:

输入: [100, 4, 200, 1, 3, 2]
输出: 4
解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。

*/

/*
方法一：hashset
第一反应，先排序，再找长度，但是时间复杂度要求O（n），所以只能考虑其他方法
当要求时间复杂度时，通常用空间换时间，当要求空间复杂度时，通常用时间换空间
考虑使用HashSet, HashSet的add和contains方法时间复杂度都为1
先将所有数放入hashset，然后对所有数遍历，找到num-1不存在的数，即为所有可能最长连续序列的开头，循环判断num+1是否存在，是即更新长度，不是即重置
此处虽然是一个for循环嵌套while,但是时间复杂度不是n2，因为while只有当num+1存在时才会执行，因此while循环在整个过程中只会循环n次
所以时间复杂度是O(n+n)=O(n)，是线性的
*/

class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int num:nums){
            set.add(num);
        }
        
        int  maxLen = 0;
        for(int num: nums){
            if(!set.contains(num - 1)){
                int curLen = 1;
                int curNum = num;
                while(set.contains(curNum + 1)){
                    curLen++;
                    curNum++;
                }
                maxLen = Math.max(maxLen, curLen);
            }
        }
        
        return maxLen;
    }
}
