/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

*/

/*
方法一：动态规划
状态转移方程 dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i])
*/

class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int[] dp = new int[nums.length + 1];
        dp[1] = nums[0];
        for(int i = 2; i<=nums.length; i++){
            dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i-1]);
        }
        return dp[nums.length];
    }
}

/*
方法二：动态规划改进
使用cur和pre来代替dp[i-1]和dp[i-2]，避免数组所占内存空间
用temp提前保存cur，此时temp即为上一轮cur，最后将temp赋给pre，下一轮时的pre就成了两轮前的cur即为dp[i-2]
*/

class Solution {
    public int rob(int[] nums) {
        int pre = 0;
        int cur = 0;
        for(int num: nums){
            int temp = cur;
            cur = Math.max(cur, pre + num);
            pre = temp; 
        }
        return cur;
    }
}
