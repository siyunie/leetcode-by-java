/*
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]


*/

/*
方法一：迭代

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        Queue<TreeNode> queue=new LinkedList<>();
        
        queue.add(root);
        int i=0;
        while(!queue.isEmpty()){
            list.add(new ArrayList<>());
            int len=queue.size();
            for(int j=0;j<len;j++){
                TreeNode temp=queue.poll();
                list.get(i).add(temp.val);
                if(temp.left!=null){
                    queue.add(temp.left);
                }
                if(temp.right!=null){
                    queue.add(temp.right);
                }
            }
            i++;
        }
        return list;
    }
}

/*
方法二：递归
*/

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        helper(root,0,list);
        return list;
    }
    
    public void helper(TreeNode node,int level,List<List<Integer>> list){
        if(list.size()<=level){
            list.add(new ArrayList<>());
        }
        list.get(level).add(node.val);
        if(node.left!=null){
            helper(node.left,level+1,list);
        }
        if(node.right!=null){
            helper(node.right,level+1,list);
        }
    }
}
