/*
给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

 

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

提示：

你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。

 

进阶：

你能在线性时间复杂度内解决此题吗？
*/

/*
方法一：双向队列
双向队列保存数组元素的下标，保证对应的数组元素值一定降序，如果非降序，则依次将队列尾部比新值小的数poll出来，再添加新值
result保存最大值结果，只有当第一次队列初始化完成，即队列长度第一次达到k时再开始记录即i-k+1>=0时再开始记录
当初始化完成后，每当新元素添加，都要判断队列的头部元素的下标是否已经超出窗口范围，如果超出就删除
 */
 
 class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0 || nums.length == 1){
            return nums;
        }
        Deque<Integer> queue = new LinkedList<>();
        int[] result = new int[nums.length - k + 1];
        for(int i = 0; i < nums.length; i++){
            while(!queue.isEmpty() && nums[queue.peekLast()] <= nums[i]){ //队列保存下标，保证队列保存的下标对应的值一定为降序
                queue.pollLast();
            }
            queue.offer(i);
            if(queue.peek() <= i-k){ //当队列长度大于k，移除头部，因为头部一定是队列中下标最小的
                queue.poll();
            }
            if(i - k + 1 >= 0){  //当队列第一次初始化完毕时，即第一次长度达到k时才开始记录结果最大值
                result[i - k + 1] = nums[queue.peek()];   //因为队列为降序，最大值一定为队列头
            }
        }
        return result;
    }
}
