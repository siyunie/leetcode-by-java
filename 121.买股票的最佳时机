/*
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

*/

/*
方法一：动态规划改进
dp0保存当前没持有股票的情况，所以只可能是1.前一天也没有持有股票或者2.今天把股票卖了出去 所以dp0=max(dp0,dp1+prices[i])
dp1保存当前持有股票的情况， 只可能是1.前一天也持有股票 2.今天刚刚买进股票 因为只让交易一次 所以情况2的值为-prices[i] 所以 dp1=max(dp1,-prices[i])
*/

class Solution {
    public int maxProfit(int[] prices) {
        int dp0 = 0;
        int dp1 = Integer.MIN_VALUE;
        for(int i=0;i<prices.length;i++){
            dp0 = Math.max(dp0,dp1+prices[i]);
            dp1 = Math.max(dp1,-prices[i]);
        }
        return dp0;
    }
}
