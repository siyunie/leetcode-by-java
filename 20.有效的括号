/*
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

*/

/*
方法一：使用stack，peek出栈顶元素，与新元素match就pop出来，不然就把新元素push进栈，最后判断是否为空
优化判断1. 当string长度为奇数，直接输出false 
       2.当栈深度大于字符串的一半，直接输出false
*/

import java.util.Stack;
class Solution {
    public boolean isValid(String s) {
        if(s.length()%2!=0){
            return false;
        }
        Stack<Character> stack=new Stack<>();
        char[] arr=s.toCharArray();
        for(int i=0;i<arr.length;i++){
            if(stack.size()>s.length()/2){
                return false;
            }
            if(arr[i]==')'&&!stack.isEmpty()&&stack.peek()=='('){
                stack.pop();
            }else if(arr[i]=='}'&&!stack.isEmpty()&&stack.peek()=='{'){
                stack.pop();
            }else if(arr[i]==']'&&!stack.isEmpty()&&stack.peek()=='['){
                stack.pop();
            }else{
                stack.push(arr[i]);
            }
        }
        if(stack.isEmpty()){
            return true;
        }else{
            return false;
        }
    }
}

//

class Solution {
    public boolean isValid(String s) {
        if(s.length() == 0){
            return true;
        }
        if(s.length() % 2 != 0){
            return false;
        }
        Stack<Character> stack = new Stack<>();
        Map<Character, Character> map = new HashMap<Character, Character>(){{
            put('(', ')');
            put('[', ']');
            put('{','}');
        }};
        for(char cha: s.toCharArray()){
            if(stack.size() > s.length() / 2){
                return false;
            }
            if(cha == '[' || cha == '{' || cha == '('){
                stack.push(cha);
            }else{
                if(stack.isEmpty() || map.get(stack.pop()) != cha){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
