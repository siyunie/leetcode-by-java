/*

给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

*/

/*
方法一: DFS
先考虑回溯, 直接遇到'O' 就开始寻找是否是被包围的,但是这样一旦发现不是,又要重置状态,然后回溯
所以想到反向, 即遍历四条边, 因为只有连接到边上的'O'才可能是不被包围的, 在边上碰到'O'就直接dfs,这样避免回溯状态重置,因为跟边上'O'相连的'O'一定是不被包围的

*/

class Solution {
    public void solve(char[][] board) {
        if(board.length == 0){
            return;
        }
        for(int j = 0; j < board[0].length; j++){
            helper(board, 0, j);
            helper(board, board.length - 1, j);
        }
        for(int i = 0; i < board.length; i++){
            helper(board, i, 0);
            helper(board, i, board[0].length - 1);
        }
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '1'){
                    board[i][j] = 'O';
                }else{
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void helper(char[][] board, int row, int col){
        if(row >= board.length || col >= board[0].length || row < 0 || col < 0 || board[row][col] != 'O'){
            return;
        }
        board[row][col] = '1';
        helper(board, row + 1, col);
        helper(board, row - 1, col);
        helper(board, row, col + 1);
        helper(board, row, col - 1);
    }
}
