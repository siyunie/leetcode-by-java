/*

给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。

例如，从根到叶子节点路径 1->2->3 代表数字 123。

计算从根到叶子节点生成的所有数字之和。

说明: 叶子节点是指没有子节点的节点。

示例 1:

输入: [1,2,3]
    1
   / \
  2   3
输出: 25
解释:
从根到叶子节点路径 1->2 代表数字 12.
从根到叶子节点路径 1->3 代表数字 13.
因此，数字总和 = 12 + 13 = 25.
示例 2:

输入: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
输出: 1026
解释:
从根到叶子节点路径 4->9->5 代表数字 495.
从根到叶子节点路径 4->9->1 代表数字 491.
从根到叶子节点路径 4->0 代表数字 40.
因此，数字总和 = 495 + 491 + 40 = 1026.

*/

/*
方法一:回溯法
标准回溯法,注意此处要判断左右节点是否为空,再决定是否继续左右走,不然会重复计算叶节点,同时也会错误的将非叶节点加入到结果中

此处只要求返回和,所以维持两个int型变量即可,不需要栈

*/

class Solution {
    int res;
    public int sumNumbers(TreeNode root) {
        if(root == null){
            return 0;
        }
        helper(root, root.val);
        return res;
    }
    public void helper(TreeNode root, int k){
        if(root.left == null && root.right == null){
            res += k;
            return;
        }
        if(root.left != null){
            k *= 10;
            k += root.left.val;
            helper(root.left, k);
            k -= root.left.val;
            k /= 10;
        }
        if(root.right != null){
            k *= 10;
            k += root.right.val;
            helper(root.right, k);
            k -= root.right.val;
            k /= 10;
        }
    }
}
