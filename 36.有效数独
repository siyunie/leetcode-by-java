/*

判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

*/

/*
方法一:boolean二维数组
维持三个boolean二维数组保存某行 某列 某块的值是否已经被用到
index计算方法为 index =(i/3)*3 + j/3
注意此处num = board[i][j] - '1' 不是平常的'0' 因为数范围是1-9 如果减0的话num范围为1-10 超过boolean[9][9]数组大小范围 
此处用col[num][j] = true 然后判断col[num][j]是否为true也可

*/

class Solution {
    public boolean isValidSudoku(char[][] board) {
        boolean[][] row = new boolean[9][9];
        boolean[][] col = new boolean[9][9];
        boolean[][] box = new boolean[9][9];
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    int num = board[i][j] - '1';
                    int index = (i/3)*3 + j/3;
                    if(row[i][num] || col[j][num] || box[index][num]){
                        return false;
                    }else{
                        row[i][num] = true;
                        col[j][num] = true;
                        box[index][num] = true;
                    }
                }
            }
        }
        return true;
    }
}


/*
方法二:使用hashmap保存行 列 块 的结果
注意初始化hashmap数组的格式为 HashMap<Intger, Integer>[] x = new HashMap[n] 并且之后一定要对每一个x[]都单独new一个HashMap 之后才能正常使用

*/

class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashMap<Integer, Integer>[] row = new HashMap[9];
        HashMap<Integer, Integer>[] col = new HashMap[9];
        HashMap<Integer, Integer>[] box = new HashMap[9];

        for(int i = 0; i < 9 ; i++){
            row[i] = new HashMap<Integer, Integer>();
            col[i] = new HashMap<Integer, Integer>();
            box[i] = new HashMap<Integer, Integer>();
        }

        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] != '.'){
                    int num = board[i][j] - '1';
                    int index = (i/3)*3 + j/3;
                    row[i].put(num, row[i].getOrDefault(num, 0) + 1);
                    col[j].put(num, col[j].getOrDefault(num, 0) + 1);
                    box[index].put(num, box[index].getOrDefault(num, 0) + 1);
                    if(row[i].get(num) > 1 || col[j].get(num) > 1 || box[index].get(num) > 1){
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

//HashSet实现

class Solution {
    public boolean isValidSudoku(char[][] board) {
        List<HashSet<Character>> list = new ArrayList<>();
        for(int i = 0; i < 27; i++){
            list.add(new HashSet<Character>());
        }
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] == '.'){
                    continue;
                }
                HashSet<Character> row = list.get(i);
                HashSet<Character> col = list.get(9 + j);
                HashSet<Character> block = list.get(18 + (i/3) * 3 + j/3);
                if(row.contains(board[i][j]) || col.contains(board[i][j]) || block.contains(board[i][j])){
                    return false;
                }
                row.add(board[i][j]);
                list.set(i, row);
                col.add(board[i][j]);
                list.set(9 + j, col);
                block.add(board[i][j]);
                list.set(18 + (i/3) * 3 + j/3, block);
            }
        }
        return true;
    }
}
