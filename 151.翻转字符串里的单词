/*
给定一个字符串，逐个翻转字符串中的每个单词。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

说明：

无空格字符构成一个单词。
输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
 

进阶：

请选用 C 语言的用户尝试使用 O(1) 额外空间复杂度的原地解法。

*/

/*
方法一:转换成字符串数组反序输出
注意因为split是按空格分的,如果有多个空格连续,在字符串数组里会有空字符串,即"" 所以一定要判断if(str[i].equals(""))
一定是"" 而不是" "

*/

class Solution {
    public String reverseWords(String s) {
        s = s.trim();
        if(s.equals("")){
            return "";
        }
        String[] str = s.split(" ");
        StringBuilder strB = new StringBuilder();
        int len = str.length;
        for(int i = len - 1; i >= 0; i--){
            if(str[i].equals("")){
                continue;
            }
            strB.append(str[i]);
            strB.append(" ");
        }
        return strB.toString().trim();
    }
}
