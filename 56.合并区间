/*
给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].
示例 2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

*/

/*
方法一：先对数组进行排序，按照左端值从小到大排列，判断每个数组的右端是否大于下一数组左端，如果是则合并，不然直接添加
注意此时合并要判断当前数组的右端值和下一数组的右端值哪个大，把大的作为新添加数组的右端值
*/

class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> list=new ArrayList<>();
        if(intervals.length==0){
            return list.toArray(new int[0][0]);
        }
        Arrays.sort(intervals,new Comparator<int[]>(){
            public int compare(int[] o1,int[] o2){
                return o1[0]-o2[0];
            }
        });
        int i=0;
        while(i<intervals.length){
            int left=intervals[i][0];
            int right=intervals[i][1];
            while(i<intervals.length-1&&right>=intervals[i+1][0]){
                i++;
                right=Math.max(right,intervals[i][1]);
            }
            list.add(new int[]{left,right});
            i++;
        }
        return (int[][])list.toArray(new int[0][0]);
    }
}

//

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                if(o1[0] != o2[0]){
                    return o1[0] - o2[0];
                }else{
                    return o1[1] - o2[1];
                }
            }
        });
        List<int[]> list = new ArrayList<>();
        for(int i = 0; i < intervals.length; i++){
            int[] tmp = new int[2];
            tmp[0] = intervals[i][0];
            if(i < intervals.length - 1 && intervals[i][1] >= intervals[i + 1][0]){
                int j = i + 1;
                int maxRight = intervals[i][1];
                while(j < intervals.length){
                    if(maxRight >= intervals[j][0]){
                        maxRight = Math.max(maxRight, intervals[j][1]);
                        j++;
                    }else{
                        break;
                    }
                }
                tmp[1] = maxRight;
                i = j - 1;
            }else{
                tmp[1] = intervals[i][1];
            }
            list.add(tmp);
        }
        return list.toArray(new int[list.size()][2]);
    }
}
