/*

给定一个由正整数组成且不存在重复数字的数组，找出和为给定目标正整数的组合的个数。

示例:

nums = [1, 2, 3]
target = 4

所有可能的组合为：
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

请注意，顺序不同的序列被视作不同的组合。

因此输出为 7。
进阶：
如果给定的数组中含有负数会怎么样？
问题会产生什么变化？
我们需要在题目中添加什么限制来允许负数的出现？

*/

/*
方法一:完全背包问题
因为不用保存不同结果的具体值,只用求出结果个数和,所以不需要用递归,时间复杂度太高
考虑看出动态规划 完全背包问题
dp[i]保存总量为i的背包有多少种装法
dp[i] = dp[i-nums[0]] + dp[i-nums[1]] + .... + dp[i-nums[len-1]] 条件是i>=nums[j]
dp[0]初始化为1,即容量为0只有一种装法就是都不装

比如 nums={1,2,3}  target = 4

dp[4] = dp[4-1]+dp[4-2]+dp[4-3] = dp[3]+dp[2]+dp[1]

dp[1] = dp[0] = 1;
dp[2] = dp[1]+dp[0] = 2;
dp[3] = dp[2]+dp[1]+dp[0] = 4;
dp[4] = dp[4-1]+dp[4-2]+dp[4-3] = dp[3]+dp[2]+dp[1] = 7


*/


class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target + 1];
        dp[0] = 1;
        for(int i = 1; i <= target; i++){
            for(int j = 0; j < nums.length; j++){
                if(i >= nums[j]){
                    dp[i] = dp[i - nums[j]] + dp[i];
                }
            }
        }
        return dp[target];
    }
}
