/*
你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。

你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。

示例:

输入: 4
输出: false 
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。

*/

/*
方法一:数学法
一拿到题目直接递归,发现超时
然后想到动态规划,记录之前算过的值的结果,避免重复计算,还是超时
最后从数学方向考虑,因为双方每一步都是最优解,当剩下1,2,3时都是必胜,而当剩下4时必输
推论当轮到自己时剩下的石头是4的倍数时,都是必输,当非4的倍数时都是必胜
比如 轮到自己时石头数是8,那么不管是拿1,2,3,对方下一次都能让对方拿完之后剩下的石头为4,自己必输
     轮到自己时时石头数是5,6,7, 那么自己总能让拿完之后剩下的石头为4,此时轮到对方,对方必输,自己必胜

*/

class Solution {
    public boolean canWinNim(int n) {
        return n % 4 != 0;
    }
}
